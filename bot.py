import logging
import asyncio
from typing import Optional

from telegram import Update, UsersShared, ReplyKeyboardRemove# type: ignore
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackContext, filters# type: ignore
from telegram.error import TelegramError# type: ignore

from libs.wireguard import config
from libs.wireguard import user_control as wireguard
from libs.wireguard import utils as wireguard_utils

from libs.telegram.database import UserDatabase
from libs.telegram import utils as telegram_utils
from libs.telegram import wrappers, keyboards, messages


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


database = UserDatabase(config.users_database_path)
semaphore = asyncio.Semaphore(config.telegram_max_concurrent_messages)


async def __check_database_state(update: Update) -> bool:
    if not database.db_loaded:
        logger.error('–û—à–∏–±–∫–∞! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
        await update.message.reply_text('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        return False
    return True


async def __ensure_user_exists(telegram_id: int, update: Update) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.
    
    Args:
        user_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
        update (Update): –û–±—ä–µ–∫—Ç Update –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Returns:
        bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω. False, –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.
    """
    if not await __check_database_state(update):
        return False

    if not database.is_telegram_user_exists(telegram_id):
        logger.info(f"–î–æ–±–∞–≤–ª—è—é –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ Tid [{telegram_id}].")
        database.add_telegram_user(telegram_id)
    return True


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: CallbackContext) -> None:
    telegram_id = update.effective_user.id
    if not await __ensure_user_exists(telegram_id, update):
        return
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É [start] -> Tid [{telegram_id}].")
    await update.message.reply_text(
        messages.ADMIN_HELLO if telegram_id in config.telegram_admin_ids else messages.USER_HELLO
    )


# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: CallbackContext) -> None:
    telegram_id = update.effective_user.id
    if not await __ensure_user_exists(telegram_id, update):
        return
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É [help] -> Tid [{telegram_id}].")
    await update.message.reply_text(
        messages.ADMIN_HELP if telegram_id in config.telegram_admin_ids else messages.USER_HELP,
        parse_mode='HTML'
    )
    await __end_command(update)


# –ö–æ–º–∞–Ω–¥–∞ /menu
async def menu_command(update: Update, context: CallbackContext) -> None:
    telegram_id = update.effective_user.id
    if not await __ensure_user_exists(telegram_id, update):
        return

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É [menu] -> Tid [{telegram_id}].")
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.',
        reply_markup=(
            keyboards.ADMIN_MENU if telegram_id in config.telegram_admin_ids else keyboards.USER_MENU
        )
    )


# –ö–æ–º–∞–Ω–¥–∞ /get_telegram_id
async def get_telegram_id_command(update: Update, context: CallbackContext) -> None:
    telegram_id = update.effective_user.id
    if not await __ensure_user_exists(telegram_id, update):
        return
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É [get_telegram_id] -> Tid [{telegram_id}].")
    await update.message.reply_text(f'–í–∞—à id: {telegram_id}.')
    await __end_command(update)


# –ö–æ–º–∞–Ω–¥–∞ /request_new_config
async def request_new_config_command(update: Update, context: CallbackContext) -> None:
    telegram_id = update.effective_user.id
    telegram_name = await telegram_utils.get_username_by_id(telegram_id, context)

    for admin_id in config.telegram_admin_ids:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(chat_id=admin_id, text=
                                           f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{telegram_name} ({telegram_id})] –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ Wireguard.')
            logger.info(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º [{telegram_name} ({telegram_id})] –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}.")
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}.")

    await __end_command(update)


# –ö–æ–º–∞–Ω–¥–∞ /get_telegram_users
@wrappers.admin_required
async def get_telegram_users_command(update: Update, context: CallbackContext) -> None:
    telegram_id = update.effective_user.id

    if not database.db_loaded:
        logger.error('–û—à–∏–±–∫–∞! –ù–µ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
        return

    telegram_ids = database.get_all_telegram_users()
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π -> Tid [{telegram_id}].")
    if telegram_ids:
        telegram_usernames = await telegram_utils.get_usernames_in_bulk(telegram_ids, context, semaphore)

        # –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML
        header = f"<b>üìã Telegram Id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ [{len(telegram_ids)}]</b>\n\n"
        user_lines = [
            f"{index}. {telegram_username or '–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'} ({telegram_id})\n"
            for index, (telegram_id, telegram_username) in enumerate(telegram_usernames.items(), start=1)
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π HTML
        await update.message.reply_text(header + "".join(user_lines), parse_mode='HTML')

    else:
        await update.message.reply_text(f'–£ –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
    await __end_command(update)


# –ö–æ–º–∞–Ω–¥–∞ /add_user
@wrappers.admin_required
@wrappers.command_lock
async def add_user_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text((
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º.\n\n'
            '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.'
        ))
    context.user_data['command'] = 'add_user'
    context.user_data['wireguard_users'] = []


# –ö–æ–º–∞–Ω–¥–∞ /remove_user
@wrappers.admin_required
@wrappers.command_lock
async def remove_user_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text((
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º.\n\n'
            '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.'
        ))
    context.user_data['command'] = 'remove_user'
    

# –ö–æ–º–∞–Ω–¥–∞ /com_uncom_user
@wrappers.admin_required
@wrappers.command_lock
async def com_uncom_user_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text((
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º.\n\n'
            '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.'
        ))
    context.user_data['command'] = 'com_uncom_user'


# –ö–æ–º–∞–Ω–¥–∞ /bind_user
@wrappers.admin_required
@wrappers.command_lock
async def bind_user_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text((
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º.\n\n'
            '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.'
        ))
    context.user_data['command'] = 'bind_user'
    context.user_data['wireguard_users'] = []


# –ö–æ–º–∞–Ω–¥–∞ /unbind_user
@wrappers.admin_required
@wrappers.command_lock
async def unbind_user_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text((
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º.\n\n'
            '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.'
        ))
    context.user_data['command'] = 'unbind_user'


# –ö–æ–º–∞–Ω–¥–∞ /send_message
@wrappers.admin_required
@wrappers.command_lock
async def send_message_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text((
            '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n'
            '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.'
        ))
    context.user_data['command'] = 'send_message'


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
@wrappers.admin_required
async def cancel_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text((
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –≤—ã–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é (/menu).'
        ),
        reply_markup=keyboards.ADMIN_MENU
    )
    context.user_data['command'] = None


# –ö–æ–º–∞–Ω–¥–∞ /unbind_telegram_id
@wrappers.admin_required
@wrappers.command_lock
async def unbind_telegram_id_command(update: Update, context: CallbackContext) -> None:    
    await update.message.reply_text((
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å.\n\n'
            '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å.'
        ), 
        reply_markup=keyboards.BIND_MENU
    )
    context.user_data['command'] = 'unbind_telegram_id'


# –ö–æ–º–∞–Ω–¥–∞ /get_users_by_id
@wrappers.admin_required
@wrappers.command_lock
async def get_bound_users_by_telegram_id_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text((
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å.\n\n'
            '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å.'
        ),
        reply_markup=keyboards.BIND_MENU
    )
    context.user_data['command'] = 'get_users_by_id'


@wrappers.admin_required
@wrappers.command_lock
async def send_config_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text((
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º.\n\n'
            '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.'
        ))
    context.user_data['command'] = 'send_config'
    context.user_data['wireguard_users'] = []


# –ö–æ–º–∞–Ω–¥–∞ /show_users_state
@wrappers.admin_required
async def show_users_state_command(update: Update, context: CallbackContext) -> None:
    from_telegram_id = update.effective_user.id

    if not database.db_loaded:
        logger.error('–û—à–∏–±–∫–∞! –ù–µ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã linked_users
    linked_users = database.get_all_linked_data()

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_usernames = sorted(wireguard.get_active_usernames())

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    inactive_usernames = sorted(wireguard.get_inactive_usernames())

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_names: telegram_id}
    linked_dict = {}
    for telegram_id, user_name in linked_users:
        linked_dict[user_name] = telegram_id

    active_telegram_ids = [linked_dict.get(user_name, "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏") for user_name in active_usernames]
    inactive_telegram_ids = [linked_dict.get(user_name, "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏") for user_name in inactive_usernames]
    active_telegram_names_dict = await telegram_utils.get_usernames_in_bulk(
        [tid for tid in active_telegram_ids if telegram_utils.validate_telegram_id(tid)], context, semaphore)
    inactive_telegram_names_dict = await telegram_utils.get_usernames_in_bulk(
        [tid for tid in inactive_telegram_ids if telegram_utils.validate_telegram_id(tid)], context, semaphore)

    message_parts = []
    message_parts.append(f"<b>üîπ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [{len(active_usernames)}] üîπ</b>\n")
    for index, user_name in enumerate(active_usernames, start=1):
        telegram_id = linked_dict.get(user_name, "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏")
        telegram_name = active_telegram_names_dict.get(telegram_id, None) or "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        message_parts.append(f"{index}. <code>{user_name}</code> - {telegram_name} ({telegram_id})\n")

    message_parts.append(f"\n<b>üîπ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [{len(inactive_usernames)}] üîπ</b>\n")
    for index, user_name in enumerate(inactive_usernames, start=1):
        telegram_id = linked_dict.get(user_name, "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏")
        telegram_name = inactive_telegram_names_dict.get(telegram_id, None) or "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        message_parts.append(f"{index}. <code>{user_name}</code> - {telegram_name} ({telegram_id})\n")

    logger.info(f'–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö -> Tid [{from_telegram_id}].')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –µ—Å–ª–∏ –æ–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ)
    await telegram_utils.send_long_message(update, "".join(message_parts), parse_mode='HTML')
    await __end_command(update)
    

# –ö–æ–º–∞–Ω–¥–∞ /show_all_bindings
@wrappers.admin_required
async def show_all_bindings_command(update: Update, context: CallbackContext) -> None:
    from_telegram_id = update.effective_user.id

    if not database.db_loaded:
        logger.error('–û—à–∏–±–∫–∞! –ù–µ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã linked_users
    linked_users = database.get_all_linked_data()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã telegram_users
    telegram_ids_in_users = database.get_all_telegram_users()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö user_name
    available_usernames = wireguard.get_usernames()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {telegram_id: [user_names]}
    linked_dict = {}
    for telegram_id, user_name in linked_users:
        if telegram_id in linked_dict:
            linked_dict[telegram_id].append(user_name)
        else:
            linked_dict[telegram_id] = [user_name]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ usernames –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    linked_telegram_ids = list(linked_dict.keys())
    linked_telegram_names_dict = await telegram_utils.get_usernames_in_bulk(linked_telegram_ids, context, semaphore)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    message_parts = []
    message_parts.append(f"<b>üîπüîê –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [{len(linked_dict)}] üîπ</b>\n")
    for index, (telegram_id, user_names) in enumerate(linked_dict.items(), start=1):
        user_names_formatted = ', '.join([f"<code>{user_name}</code>" for user_name in sorted(user_names)])
        telegram_name = linked_telegram_names_dict.get(telegram_id, None) or "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        message_parts.append(f"{index}. {telegram_name} ({telegram_id}): {user_names_formatted}\n")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö Telegram ID
    unlinked_telegram_ids = set(telegram_ids_in_users) - set(linked_telegram_ids)
    if unlinked_telegram_ids:
        unlinked_telegram_names_dict = await telegram_utils.get_usernames_in_bulk(unlinked_telegram_ids, context, semaphore)
        message_parts.append(f"\n<b>üîπ‚ùå –ù–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ Telegram Id [{len(unlinked_telegram_ids)}] üîπ</b>\n")
        for index, telegram_id in enumerate(unlinked_telegram_ids, start=1):
            telegram_name = unlinked_telegram_names_dict.get(telegram_id, None) or "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            message_parts.append(f"{index}. {telegram_name} ({telegram_id})\n")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö user_name
    linked_usernames = {user_name for _, user_name in linked_users}
    unlinked_usernames = set(available_usernames) - linked_usernames
    if unlinked_usernames:
        message_parts.append(f"\n<b>üîπüõ°Ô∏è –ù–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ Wireguard [{len(unlinked_usernames)}] üîπ</b>\n")
        for index, user_name in enumerate(sorted(unlinked_usernames), start=1):
            message_parts.append(f"{index}. <code>{user_name}</code>\n")

    logger.info(f'–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö -> Tid [{from_telegram_id}].')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –µ—Å–ª–∏ –æ–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ)
    await telegram_utils.send_long_message(update, "".join(message_parts), parse_mode='HTML')
    await __end_command(update)


async def __get_configuration(update: Update, command: str, telegram_id: int) -> None:
    requester_telegram_id = update.effective_user.id

    if not database.db_loaded:
        logger.error('–û—à–∏–±–∫–∞! –ù–µ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        return
    
    if requester_telegram_id == telegram_id:
        if not database.is_telegram_user_exists(telegram_id):
            logger.info(f'–î–æ–±–∞–≤–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Tid [{telegram_id}] –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')
            database.add_telegram_user(telegram_id)

    user_names = database.get_users_by_telegram_id(telegram_id)

    if not user_names:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Tid [{telegram_id}] –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.')
        await update.message.reply_text('–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö.')
        await __end_command(update)
        return
    
    for user_name in user_names:
        await __get_user_configuration(update, command, user_name)

    await __end_command(update)


async def __get_user_configuration(update: Update, command: str, user_name: str) -> None:
    requester_telegram_id = update.effective_user.id
    
    if not wireguard.check_user_exists(user_name).status:
        logger.error(f'–ö–æ–Ω—Ñ–∏–≥ [{user_name}] –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–¥–∞–ª—è—é –ø—Ä–∏–≤—è–∑–∫—É.')
        await update.message.reply_text(f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è [{user_name}] –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π.')
        database.delete_user(user_name)
        return

    if wireguard.is_username_commented(user_name):
        logger.info(f'–ö–æ–Ω—Ñ–∏–≥ [{user_name}] –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω.')
        await update.message.reply_text(f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è [{user_name}] –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        return
    
    if command == 'get_config':
        logger.info(f'–°–æ–∑–¥–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é Zip-–∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard [{user_name}] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Tid [{requester_telegram_id}].')
        zip_ret_val = wireguard.create_zipfile(user_name)
        if zip_ret_val.status is True:
            await update.message.reply_text(f'–ê—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ QR-–∫–æ–¥–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user_name}]:')
            await update.message.reply_document(document=open(zip_ret_val.description, 'rb'))
            wireguard.remove_zipfile(user_name)
    
    elif command == 'get_qrcode':
        logger.info(f'–°–æ–∑–¥–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é Qr-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard [{user_name}] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Tid [{requester_telegram_id}].')
        png_path = wireguard.get_qrcode_path(user_name)
        if png_path.status is True:
            await update.message.reply_text(f'QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user_name}]:')
            await update.message.reply_photo(photo=open(png_path.description, 'rb'))


# –ö–æ–º–∞–Ω–¥–∞ /get_config
@wrappers.command_lock
async def get_config_command(update: Update, context: CallbackContext) -> None:
    telegram_id = update.effective_user.id
    if telegram_id in config.telegram_admin_ids:
        context.user_data['command'] = 'get_config'
        await update.message.reply_text((
            '–í—ã–±–µ—Ä–µ—Ç–µ, —á—å–∏ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å.\n\n'
            '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å.'),
            reply_markup=keyboards.CONFIG_MENU
        )
    
    else:
        await __get_configuration(update, command='get_config', telegram_id=telegram_id)


# –ö–æ–º–∞–Ω–¥–∞ /get_qrcode
@wrappers.command_lock
async def get_qrcode_command(update: Update, context: CallbackContext) -> None:
    telegram_id = update.effective_user.id
    if telegram_id in config.telegram_admin_ids:
        context.user_data['command'] = 'get_qrcode'
        await update.message.reply_text((
            '–í—ã–±–µ—Ä–µ—Ç–µ, —á—å–∏ Qr-–∫–æ–¥ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å.\n\n'
            '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å.'),
            reply_markup=keyboards.CONFIG_MENU
        )
    else:
        await __get_configuration(update, command='get_qrcode', telegram_id=telegram_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def unknown_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def handle_text(update: Update, context: CallbackContext) -> None:
    clear_command_flag = True
    try:
        command = context.user_data.get('command', None)
        if command is None:
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é. (/menu)',
                                            reply_markup=(
                                                keyboards.ADMIN_MENU 
                                                    if update.effective_user.id in config.telegram_admin_ids
                                                        else keyboards.USER_MENU 
                                            ))
            clear_command_flag = False
            return
        
        if update.message.text.lower() == '–∑–∞–∫—Ä—ã—Ç—å':
            if await __close_button_handler(update, context):
                clear_command_flag = False
                return
            
        elif update.message.text.lower() in ('—Å–≤–æ–π', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è wireguard'):
            if await __get_config_buttons_handler(update, context):
                clear_command_flag = False
                return

        elif update.message.text.lower() == '/cancel':
            await cancel_command(update, context)
            clear_command_flag = False
            return


        if command == 'send_message':
            await __send_message_to_all(update, context)
            return

        need_restart_wireguard = False
        entries = update.message.text.split()
        for entry in entries:
            ret_val = None
            
            if command == 'add_user':
                ret_val = await __add_user(update, context, entry)

            elif command == 'remove_user':
                ret_val = await __rem_user(update, entry)

            elif command == 'com_uncom_user':
                ret_val = await __com_user(update, entry)
            
            elif command in ('bind_user', 'send_config'):
                ret_val = await __create_list_of_bindings(update, context, entry)

            elif command == 'unbind_user':
                await __unbind_user(update, entry)

            elif command in ('get_qrcode', 'get_config'):
                await __get_user_configuration(update, command, entry)


            if ret_val is not None:
                await update.message.reply_text(ret_val.description)
                logger.error(ret_val.description) if ret_val.status is False else logger.info(ret_val.description)

                if ret_val.status is True:
                    need_restart_wireguard = True
        
        if need_restart_wireguard:
            wireguard_utils.log_and_restart_wireguard()
            need_restart_wireguard = False

        
        if command in ('add_user', 'bind_user'):
            if len(context.user_data['wireguard_users']):
                await update.message.reply_text(
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"
                    " –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ Wireguard.\n\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–≤—è–∑—ã–≤–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å.", reply_markup=keyboards.BIND_MENU)
                clear_command_flag = False
        
        elif command == 'send_config':
            if len(context.user_data['wireguard_users']):
                await update.message.reply_text(
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"
                    " , –∫–æ—Ç–æ—Ä—ã–º –ø–µ—Ä–µ–¥–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ Wireguard.\n\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å.", reply_markup=keyboards.SEND_MENU)
                clear_command_flag = False

    except Exception as e:
        logger.error(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}')
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.')

    finally:
        if clear_command_flag:
            # –û—á–∏—Å—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            context.user_data['command'] = None
            await __end_command(update)


async def __get_config_buttons_handler(update: Update, context: CallbackContext) -> bool:
    command = context.user_data.get('command', None)

    if command in ('get_qrcode', 'get_config'):
        if update.message.text.lower() == '—Å–≤–æ–π':
            await __get_configuration(update, command, update.effective_user.id)
            context.user_data['command'] = None
            return True

        elif update.message.text.lower() == '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è wireguard':
            await update.message.reply_text((
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º.\n\n'
                '–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.'
            ))
            return True
    return False


async def __close_button_handler(update: Update, context: CallbackContext) -> bool:
    command = context.user_data.get('command', None)
    
    if command in ('add_user', 'bind_user'):
        await __delete_message(update, context)

        user_names = context.user_data["wireguard_users"]
        await update.message.reply_text((
                f'–°–≤—è–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ['
                f'{", ".join([f"<code>{user_name}</code>" for user_name in sorted(user_names)])}] –æ—Ç–º–µ–Ω–µ–Ω–æ.'
            ),
            parse_mode='HTML'
        )

        context.user_data['command'] = None
        context.user_data['wireguard_users'] = []
        await __end_command(update)
        return True
    
    elif command in ('unbind_telegram_id', 'get_users_by_id', 'get_qrcode', 'get_config', 'send_config'):
        await __delete_message(update, context)
        await cancel_command(update, context)
        return True
    return False


async def __delete_message(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
    message_id = update.message.message_id
    chat_id = update.message.chat_id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.delete_message(chat_id=chat_id, message_id=message_id)


async def __send_message_to_all(update: Update, context: CallbackContext) -> None:
    for telegram_id in database.get_all_telegram_users():
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(chat_id=telegram_id, text=update.message.text)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            database.delete_telegram_user(telegram_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


async def __validate_username(update: Update, user_name: str) -> bool:
    if not telegram_utils.validate_username(user_name):
        await update.message.reply_text(f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                                        f' [{user_name}].\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å'
                                        f' —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.')
        return False
    return True


async def __validate_telegram_id(update: Update, telegram_id: int) -> bool:
    if not telegram_utils.validate_telegram_id(telegram_id):
        await update.message.reply_text(
            f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram ID [{telegram_id}].\nTelegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.'
        )
        return False
    return True


async def __add_user(update: Update, context: CallbackContext, user_name: str) -> Optional[wireguard_utils.FunctionResult]:
    if not await __validate_username(update, user_name):
        return None
    # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ WireGuard –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ret_val = wireguard.add_user(user_name)

    if ret_val.status is True:
        zip_ret_val = wireguard.create_zipfile(user_name)
        if zip_ret_val.status is True:
            await update.message.reply_document(document=open(zip_ret_val.description, 'rb'))
            wireguard.remove_zipfile(user_name)
            context.user_data['wireguard_users'].append(user_name)
    return ret_val


async def __rem_user(update: Update, user_name: str) -> Optional[wireguard_utils.FunctionResult]:
    if not await __validate_username(update, user_name):
        return None
    # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ WireGuard –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ret_val = wireguard.remove_user(user_name)

    if ret_val.status is True:
        if await __check_database_state(update):
            if not database.delete_user(user_name):
                logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [{user_name}] –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
                await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
                                                f' [{user_name}] –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
            else:
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
    return ret_val


async def __com_user(update: Update, user_name: str) -> Optional[wireguard_utils.FunctionResult]:
    if not await __validate_username(update, user_name):
        return None
    # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ WireGuard –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return wireguard.comment_or_uncomment_user(user_name)


async def __create_list_of_bindings(update: Update, context: CallbackContext, user_name: str) -> Optional[wireguard_utils.FunctionResult]:
    if not await __validate_username(update, user_name):
        return None

    ret_val = wireguard.check_user_exists(user_name)
    if ret_val.status is True:
        ret_val = None
        context.user_data['wireguard_users'].append(user_name)
    return ret_val


async def __unbind_user(update: Update, user_name: str) -> None:
    if not await __validate_username(update, user_name):
        return

    if not await __check_database_state(update):
        return
    
    if database.user_exists(user_name):
        if database.delete_user(user_name):
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.')
            await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.')
        else:
            logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user_name}].')
            await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user_name}].')
    else:
        await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–º—É Telegram ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')


async def handle_user_request(update: Update, context: CallbackContext) -> None:
    clear_command_flag = True
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await __delete_message(update, context)
        
        command = context.user_data.get('command', None)
        if command is None:
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é. (/menu)',
                                reply_markup=(
                                    keyboards.ADMIN_MENU 
                                        if update.effective_user.id in config.telegram_admin_ids
                                            else keyboards.USER_MENU 
                                ))
            clear_command_flag = False
            return
        
        for shared_user in update.message.users_shared.users:
            if command in ('add_user', 'bind_user'):
                await __bind_users(update, context, shared_user)

            elif command == 'unbind_telegram_id':
                await __unbind_telegram_id(update, context, shared_user.user_id)

            elif command == 'get_users_by_id':
                await __get_bound_users_by_tid(update, context, shared_user.user_id)

            elif command in ('get_qrcode', 'get_config'):
                await __get_configuration(update, command, shared_user.user_id)
                context.user_data['command'] = None
                clear_command_flag = False

            elif command == 'send_config':
                await __send_config(update, context, shared_user)


    except Exception as e:
        logger.error(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}')
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.')

    finally:
        if clear_command_flag:
            # –û—á–∏—Å—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            context.user_data['command'] = None
            context.user_data['wireguard_users'] = []

            await __end_command(update)


async def __bind_users(update: Update, context: CallbackContext, telegram_user: UsersShared) -> None:
    if not await __check_database_state(update):
        return
    
    telegram_id = telegram_user.user_id
    telegram_name = telegram_user.username

    for user_name in context.user_data['wireguard_users']:
        if not database.user_exists(user_name):
            if database.add_user(telegram_id, user_name):
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ [@{telegram_name} ({telegram_id})].')
                await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É—Å–ø–µ—à–Ω–æ'
                                                f' –ø—Ä–∏–≤—è–∑–∞–Ω –∫ [@{telegram_name} ({telegram_id})].')
            else:
                logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user_name}].')
                await update.message.reply_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
                                                f' [{user_name}] –≤ –±–∞–∑—É. –û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        else:
            _telegram_id = database.get_telegram_id_by_user(user_name)[0]
            _telegram_name = await telegram_utils.get_username_by_id(_telegram_id, context)
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ [{_telegram_name} ({_telegram_id})] –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
            await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫'
                                            f' [{_telegram_name} ({_telegram_id})] –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')


async def __unbind_telegram_id(update: Update, context: CallbackContext, telegram_id: int) -> None:
    if not await __validate_telegram_id(update, telegram_id):
        return

    if not await __check_database_state(update):
        return

    telegram_name = await telegram_utils.get_username_by_id(telegram_id, context)
    
    if database.telegram_id_exists(telegram_id):
        if database.delete_users_by_telegram_id(telegram_id):
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Wireguard —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω—ã –æ—Ç [{telegram_name} ({telegram_id})].')
            await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Wireguard —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω—ã –æ—Ç [{telegram_name} ({telegram_id})].')
        else:
            logger.info(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard –æ—Ç [{telegram_name} ({telegram_id})].')
            await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard –æ—Ç [{telegram_name} ({telegram_id})].')
    else:
        await update.message.reply_text(
            f'–ù–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ [{telegram_name} ({telegram_id})] –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
        )


async def __get_bound_users_by_tid(update: Update, context: CallbackContext, telegram_id: int) -> None:
    if not await __validate_telegram_id(update, telegram_id):
        return

    if not await __check_database_state(update):
        return

    telegram_name = await telegram_utils.get_username_by_id(telegram_id, context)

    if database.telegram_id_exists(telegram_id):
        user_names = database.get_users_by_telegram_id(telegram_id)
        await update.message.reply_text(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Wireguard, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫ [{telegram_name} ({telegram_id})]:'
            f' [{", ".join([f"<code>{user_name}</code>" for user_name in sorted(user_names)])}].',
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            f'–ù–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ [{telegram_name} ({telegram_id})] –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
        )


async def __send_config(update: Update, context: CallbackContext, telegram_user: UsersShared) -> None:
    if not await __check_database_state(update):
        return
    
    telegram_id = telegram_user.user_id
    telegram_name = telegram_user.username

    for user_name in context.user_data['wireguard_users']:
        if not wireguard.check_user_exists(user_name).status:
            logger.error(f'–ö–æ–Ω—Ñ–∏–≥ [{user_name}] –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            await update.message.reply_text(f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è [{user_name}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            return

        if wireguard.is_username_commented(user_name):
            logger.info(f'–ö–æ–Ω—Ñ–∏–≥ [{user_name}] –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω.')
            await update.message.reply_text(f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è [{user_name}] –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.')
            return
        
        logger.info(f'–°–æ–∑–¥–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é Zip-–∞—Ä—Ö–∏–≤ –∏ Qr-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard [{user_name}] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [{telegram_name} ({telegram_id})].')
        zip_ret_val = wireguard.create_zipfile(user_name)
        try:
            if zip_ret_val.status is True:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(chat_id=telegram_id, text=f'–í–∞—à –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ Wireguard.')
                await context.bot.send_document(chat_id=telegram_id, document=open(zip_ret_val.description, 'rb'))
                wireguard.remove_zipfile(user_name)

                png_path = wireguard.get_qrcode_path(user_name)
                if png_path.status is True:
                    await context.bot.send_photo(chat_id=telegram_id, photo=open(png_path.description, 'rb'))

                current_admin_id = update.effective_user.id
                current_admin_name = await telegram_utils.get_username_by_id(current_admin_id, context)

                for admin_id in config.telegram_admin_ids:
                    try:
                        if admin_id != current_admin_id:
                            text = (
                                    f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä [{current_admin_name} ({current_admin_id})] –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '
                                    f'Wireguard [{user_name}] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [@{telegram_name} ({telegram_id})].'
                                )
                            await context.bot.send_message(chat_id=admin_id, text=text)
                            logger.info(text)
                    except TelegramError as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}.")
                        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}.")

        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}.")
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}.")
    

async def __end_command(update: Update) -> None:
    await update.message.reply_text(
            '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–Ω–∞. –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏–∑ –º–µ–Ω—é (/menu).',
            reply_markup=keyboards.ADMIN_MENU if update.effective_user.id in config.telegram_admin_ids else keyboards.USER_MENU
        )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É BotFather
    token = config.telegram_token
    application = ApplicationBuilder().token(token).build()

    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("cancel", cancel_command))

    # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Wireguard
    application.add_handler(CommandHandler("add_user", add_user_command))
    application.add_handler(CommandHandler("remove_user", remove_user_command))
    application.add_handler(CommandHandler("com_uncom_user", com_uncom_user_command))
    application.add_handler(CommandHandler("show_users_state", show_users_state_command))

    # –ö–æ–º–∞–Ω–¥—ã —É–ø–∞—Ä–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    application.add_handler(CommandHandler("bind_user", bind_user_command))
    application.add_handler(CommandHandler("unbind_user", unbind_user_command))
    application.add_handler(CommandHandler("unbind_telegram_id", unbind_telegram_id_command))
    application.add_handler(CommandHandler("get_users_by_id", get_bound_users_by_telegram_id_command))
    application.add_handler(CommandHandler("show_all_bindings", show_all_bindings_command))

    # –ö–æ–º–∞–Ω–¥—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    application.add_handler(CommandHandler("get_config", get_config_command))
    application.add_handler(CommandHandler("get_qrcode", get_qrcode_command))
    application.add_handler(CommandHandler("request_new_config", request_new_config_command))
    application.add_handler(CommandHandler("send_config", send_config_command))
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    application.add_handler(CommandHandler("get_telegram_id", get_telegram_id_command))
    application.add_handler(CommandHandler("get_telegram_users", get_telegram_users_command))
    application.add_handler(CommandHandler("send_message", send_message_command))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
     # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    application.add_handler(MessageHandler(filters.StatusUpdate.USER_SHARED, handle_user_request))
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()



if __name__ == '__main__':
    try:        
        if not database.db_loaded:
            logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: [{config.users_database_path}]!')
        else:
            main()
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: [{e}]')