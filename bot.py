import logging
import asyncio
import threading
from typing import Optional

from telegram import SharedUser, Update, UsersShared, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
)
from telegram.error import TelegramError, NetworkError, RetryAfter, TimedOut, BadRequest

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from datetime import datetime, timedelta

from libs.wireguard import config
from libs.wireguard import stats as wireguard_stats
from libs.wireguard import user_control as wireguard
from libs.wireguard import utils as wireguard_utils

from libs.telegram.database import UserDatabase
from libs.telegram import utils as telegram_utils
from libs.telegram import wrappers, keyboards, messages
from libs.telegram.commands import BotCommands

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


database = UserDatabase(config.users_database_path)
semaphore = asyncio.Semaphore(config.telegram_max_concurrent_messages)


async def __check_database_state(update: Update) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.
    –ï—Å–ª–∏ –±–∞–∑–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –æ–ø–æ–≤–µ—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    """
    if not database.db_loaded:
        logger.error("–û—à–∏–±–∫–∞! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        if update.message is not None:
            await update.message.reply_text(
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        return False
    return True


async def __ensure_user_exists(telegram_id: int, update: Update) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —É–±–µ–∂–¥–∞–µ—Ç—Å—è,
    —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç.
    """
    if not await __check_database_state(update):
        return False

    if not database.is_telegram_user_exists(telegram_id):
        logger.info(f"–î–æ–±–∞–≤–ª—è—é –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ Tid [{telegram_id}].")
        database.add_telegram_user(telegram_id)
    return True


async def __end_command(update: Update, context: CallbackContext) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if context.user_data is not None: 
        context.user_data["command"] = None
        context.user_data["wireguard_users"] = []

    if update.message is not None and update.effective_user is not None:
        await update.message.reply_text(
            f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏–∑ –º–µ–Ω—é (/{BotCommands.MENU}).",
            reply_markup=(
                keyboards.ADMIN_MENU
                if update.effective_user.id in config.telegram_admin_ids
                else keyboards.USER_MENU
            ),
        )


# ---------------------- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ----------------------


async def start_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–µ—Ä–≤–∏—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ.
    """
    if update.effective_user is None:
        return
    
    telegram_id = update.effective_user.id
    if not await __ensure_user_exists(telegram_id, update):
        return

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É [start] -> Tid [{telegram_id}].")
    if update.message is not None:
        await update.message.reply_text(
            messages.ADMIN_HELLO
            if telegram_id in config.telegram_admin_ids
            else messages.USER_HELLO
        )


async def help_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /help: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º.
    """
    if update.effective_user is None:
        return
    
    telegram_id = update.effective_user.id
    if not await __ensure_user_exists(telegram_id, update):
        return

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É [help] -> Tid [{telegram_id}].")
    if update.message is not None:
        await update.message.reply_text(
            messages.ADMIN_HELP
            if telegram_id in config.telegram_admin_ids
            else messages.USER_HELP,
            parse_mode="HTML",
        )
    await __end_command(update, context)


async def menu_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /menu: –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if update.effective_user is None:
        return
    
    telegram_id = update.effective_user.id
    if not await __ensure_user_exists(telegram_id, update):
        return

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É [menu] -> Tid [{telegram_id}].")
    if update.message is not None:
        await update.message.reply_text(
            "üìå <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.</b>",
            reply_markup=(
                keyboards.ADMIN_MENU
                if telegram_id in config.telegram_admin_ids
                else keyboards.USER_MENU
            ),
            parse_mode="HTML"
        )


async def get_telegram_id_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /get_telegram_id: –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if update.effective_user is None:
        return
    
    telegram_id = update.effective_user.id
    if not await __ensure_user_exists(telegram_id, update):
        return

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É [get_telegram_id] -> Tid [{telegram_id}].")
    if update.message is not None:
        await update.message.reply_text(f"üÜî –í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {telegram_id}.")
    await __end_command(update, context)


async def request_new_config_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /request_new_config: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–æ–≤ –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥.
    """
    if update.effective_user is None:
        return
    
    if update.message is not None:
        await update.message.reply_text(
            "üì• <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b>\n\n"
            "üîÑ –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n"
            "üìÇ –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤, –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
            parse_mode="HTML"
        )
    
    telegram_id = update.effective_user.id
    telegram_name = await telegram_utils.get_username_by_id(telegram_id, context)

    for admin_id in config.telegram_admin_ids:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{telegram_name} ({telegram_id})] "
                    f"–∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ Wireguard."
                ),
            )
            logger.info(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –æ—Ç [{telegram_name} ({telegram_id})] "
                f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}."
            )
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}.")

    await __end_command(update, context)


@wrappers.admin_required
async def get_telegram_users_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /get_telegram_users: –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ—Ö —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ
    –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –±–æ—Ç–æ–º (–µ—Å—Ç—å –≤ –ë–î).
    """
    if update.effective_user is None:
        return
    
    telegram_id = update.effective_user.id
    if not database.db_loaded:
        logger.error("–û—à–∏–±–∫–∞! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        if update.message is not None:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        return

    telegram_ids = database.get_all_telegram_users()
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π -> Tid [{telegram_id}].")

    if not telegram_ids:
        if update.message is not None:
            await update.message.reply_text("–£ –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        await __end_command(update, context)
        return

    telegram_usernames = await telegram_utils.get_usernames_in_bulk(
        telegram_ids, context, semaphore
    )

    header = f"<b>üìã Telegram Id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ [{len(telegram_ids)}]</b>\n\n"
    user_lines = [
        f"{index}. {telegram_usernames.get(tid, '–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')} ({tid})\n"
        for index, tid in enumerate(telegram_ids, start=1)
    ]

    if update.message is not None:
        await update.message.reply_text(header + "".join(user_lines), parse_mode="HTML")

    await __end_command(update, context)


@wrappers.admin_required
@wrappers.command_lock
async def add_user_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /add_user: –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard.
    """
    if update.message is not None:
        await update.message.reply_text(messages.ENTER_WIREGUARD_USERNAMES_MESSAGE)
    if context.user_data is not None: 
        context.user_data["command"] = BotCommands.ADD_USER
        context.user_data["wireguard_users"] = []


@wrappers.admin_required
@wrappers.command_lock
async def remove_user_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /remove_user: —É–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard.
    """
    if update.message is not None:
        await update.message.reply_text(messages.ENTER_WIREGUARD_USERNAMES_MESSAGE)
    if context.user_data is not None:
        context.user_data["command"] = BotCommands.REMOVE_USER


@wrappers.admin_required
@wrappers.command_lock
async def com_uncom_user_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /com_uncom_user: –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç/—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç (–±–ª–æ–∫–∏—Ä—É–µ—Ç/—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç)
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard (–ø—É—Ç—ë–º –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ).
    """
    if update.message is not None:
        await update.message.reply_text(messages.ENTER_WIREGUARD_USERNAMES_MESSAGE)
    if context.user_data is not None:
        context.user_data["command"] = BotCommands.COM_UNCOM_USER


@wrappers.admin_required
@wrappers.command_lock
async def bind_user_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /bind_user: –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ Wireguard –∫ Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    if update.message is not None:
        await update.message.reply_text(messages.ENTER_WIREGUARD_USERNAMES_MESSAGE)
    if context.user_data is not None:
        context.user_data["command"] = BotCommands.BIND_USER
        context.user_data["wireguard_users"] = []


@wrappers.admin_required
@wrappers.command_lock
async def unbind_user_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /unbind_user: –æ—Ç–≤—è–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∏ Wireguard –æ—Ç Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ user_name).
    """
    if update.message is not None:
        await update.message.reply_text(messages.ENTER_WIREGUARD_USERNAMES_MESSAGE)
    if context.user_data is not None:
        context.user_data["command"] = BotCommands.UNBIND_USER


@wrappers.admin_required
@wrappers.command_lock
async def send_message_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /send_message: —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ –ë–î.
    """
    if update.message is not None:
        await update.message.reply_text(
            (
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
                f"–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /{BotCommands.CANCEL}."
            )
        )
    if context.user_data is not None:
        context.user_data["command"] = BotCommands.SEND_MESSAGE


@wrappers.admin_required
async def cancel_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /cancel: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    if update.message is not None:
        await update.message.reply_text(
            f"–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –≤—ã–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é (/{BotCommands.MENU}).",
            reply_markup=keyboards.ADMIN_MENU,
        )
    if context.user_data is not None:
        context.user_data["command"] = None


@wrappers.admin_required
@wrappers.command_lock
async def unbind_telegram_id_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /unbind_telegram_id: –æ—Ç–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ Wireguard –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É Telegram ID.
    """
    if update.message is not None:
        await update.message.reply_text(
            (
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å.\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å."
            ),
            reply_markup=keyboards.UNBIND_MENU,
        )
    if context.user_data is not None:
        context.user_data["command"] = BotCommands.UNBIND_TELEGRAM_ID


@wrappers.admin_required
@wrappers.command_lock
async def get_bound_users_by_telegram_id_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /get_users_by_id: –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ Wireguard –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ Telegram ID.
    """
    if update.message is not None:
        await update.message.reply_text(
            (
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å.\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å."
            ),
            reply_markup=keyboards.BINDINGS_MENU,
        )
    if context.user_data is not None:
        context.user_data["command"] = BotCommands.GET_USERS_BY_ID


@wrappers.admin_required
@wrappers.command_lock
async def send_config_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /send_config: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ Wireguard –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    if update.message is not None:
        await update.message.reply_text(messages.ENTER_WIREGUARD_USERNAMES_MESSAGE)
    if context.user_data is not None:
        context.user_data["command"] = BotCommands.SEND_CONFIG
        context.user_data["wireguard_users"] = []


@wrappers.admin_required
async def show_users_state_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /show_users_state: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–∫—Ç–∏–≤–Ω—ã–µ/–æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–µ).
    """
    if update.effective_user is None:
        return
    
    telegram_id = update.effective_user.id

    if not database.db_loaded:
        logger.error("–û—à–∏–±–∫–∞! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        if update.message is not None:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        return

    linked_users = database.get_all_linked_data()
    active_usernames = sorted(wireguard.get_active_usernames())
    inactive_usernames = sorted(wireguard.get_inactive_usernames())

    linked_dict = {}
    for tid, user_name in linked_users:
        linked_dict[user_name] = tid

    active_telegram_ids = [
        linked_dict.get(user_name, "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏") for user_name in active_usernames
    ]
    inactive_telegram_ids = [
        linked_dict.get(user_name, "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏") for user_name in inactive_usernames
    ]

    active_telegram_names_dict = await telegram_utils.get_usernames_in_bulk(
        [
            tid
            for tid in active_telegram_ids
            if telegram_utils.validate_telegram_id(tid)
        ],
        context,
        semaphore,
    )
    inactive_telegram_names_dict = await telegram_utils.get_usernames_in_bulk(
        [
            tid
            for tid in inactive_telegram_ids
            if telegram_utils.validate_telegram_id(tid)
        ],
        context,
        semaphore,
    )

    message_parts = []
    message_parts.append(f"<b>üîπ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [{len(active_usernames)}] üîπ</b>\n")
    for index, user_name in enumerate(active_usernames, start=1):
        tid = linked_dict.get(user_name, "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏")
        telegram_username = active_telegram_names_dict.get(tid, "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        message_parts.append(f"{index}. <code>{user_name}</code> - {telegram_username} ({tid})\n")

    message_parts.append(
        f"\n<b>üîπ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [{len(inactive_usernames)}] üîπ</b>\n"
    )
    for index, user_name in enumerate(inactive_usernames, start=1):
        tid = linked_dict.get(user_name, "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏")
        telegram_username = inactive_telegram_names_dict.get(
            tid, "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        message_parts.append(f"{index}. <code>{user_name}</code> - {telegram_username} ({tid})\n")

    logger.info(
        f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö -> Tid [{telegram_id}]."
    )
    await telegram_utils.send_long_message(
        update, "".join(message_parts), parse_mode="HTML"
    )
    await __end_command(update, context)


@wrappers.admin_required
async def show_all_bindings_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /show_all_bindings: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏:
    - –ö–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Wireguard –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–∞–∫–∏–º Telegram ID,
    - –°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö Telegram ID,
    - –°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö user_name.
    """
    if update.effective_user is None:
        return
    
    telegram_id = update.effective_user.id

    if not database.db_loaded:
        logger.error("–û—à–∏–±–∫–∞! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        if update.message is not None:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        return

    linked_users = database.get_all_linked_data()
    telegram_ids_in_users = database.get_all_telegram_users()
    available_usernames = wireguard.get_usernames()

    # –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {telegram_id: [user_names]}
    linked_dict = {}
    for tid, user_name in linked_users:
        linked_dict.setdefault(tid, []).append(user_name)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ—Ö Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏
    linked_telegram_ids = list(linked_dict.keys())
    linked_telegram_names_dict = await telegram_utils.get_usernames_in_bulk(
        linked_telegram_ids, context, semaphore
    )

    message_parts = [f"<b>üîπüîê –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [{len(linked_dict)}] üîπ</b>\n"]
    for index, (tid, user_names) in enumerate(linked_dict.items(), start=1):
        user_names_str = ", ".join([f"<code>{u}</code>" for u in sorted(user_names)])
        telegram_username = linked_telegram_names_dict.get(tid, "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        message_parts.append(f"{index}. {telegram_username} ({tid}): {user_names_str}\n")

    # –ù–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ Telegram ID
    unlinked_telegram_ids = set(telegram_ids_in_users) - set(linked_telegram_ids)
    if unlinked_telegram_ids:
        unlinked_telegram_names_dict = await telegram_utils.get_usernames_in_bulk(
            list(unlinked_telegram_ids), context, semaphore
        )
        message_parts.append(
            f"\n<b>üîπ‚ùå –ù–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ Telegram Id [{len(unlinked_telegram_ids)}] üîπ</b>\n"
        )
        for index, tid in enumerate(unlinked_telegram_ids, start=1):
            telegram_username = unlinked_telegram_names_dict.get(
                tid, "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
            message_parts.append(f"{index}. {telegram_username} ({tid})\n")

    # –ù–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ user_name
    linked_usernames = {u for _, u in linked_users}
    unlinked_usernames = set(available_usernames) - linked_usernames
    if unlinked_usernames:
        message_parts.append(
            f"\n<b>üîπüõ°Ô∏è –ù–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ Wireguard [{len(unlinked_usernames)}] üîπ</b>\n"
        )
        for index, user_name in enumerate(sorted(unlinked_usernames), start=1):
            message_parts.append(f"{index}. <code>{user_name}</code>\n")

    logger.info(
        f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö -> Tid [{telegram_id}]."
    )
    await telegram_utils.send_long_message(
        update, "".join(message_parts), parse_mode="HTML"
    )
    await __end_command(update, context)


async def __get_configuration(
    update: Update, command: BotCommands, telegram_id: int
) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤/QR-–∫–æ–¥–∞.
    """
    if update.effective_user is None:
        return
    
    if update.message is None:
        return
    
    requester_telegram_id = update.effective_user.id

    if not database.db_loaded:
        logger.error("–û—à–∏–±–∫–∞! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ –±–∞–∑–µ
    if requester_telegram_id == telegram_id:
        if not database.is_telegram_user_exists(telegram_id):
            logger.info(f"–î–æ–±–∞–≤–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Tid [{telegram_id}] –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            database.add_telegram_user(telegram_id)

    user_names = database.get_users_by_telegram_id(telegram_id)
    if not user_names:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Tid [{telegram_id}] –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        await update.message.reply_text(
            "–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö."
        )
        return

    for user_name in user_names:
        await __get_user_configuration(update, command, user_name)


async def __get_user_configuration(
    update: Update, command: BotCommands, user_name: str
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é .zip-–∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ QR-–∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if update.effective_user is None:
        return
    
    if update.message is None:
        return
    
    requester_telegram_id = update.effective_user.id

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    formatted_user = f"üîê <em>{user_name}</em>"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
    user_exists_result = wireguard.check_user_exists(user_name)
    if not user_exists_result.status:
        logger.error(f"–ö–æ–Ω—Ñ–∏–≥ [{user_name}] –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–¥–∞–ª—è—é –ø—Ä–∏–≤—è–∑–∫—É.")
        await update.message.reply_text(
            f"üö´ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {formatted_user} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞\n\n"
            f"<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π</em>",
            parse_mode="HTML"
        )
        database.delete_user(user_name)
        return

    if wireguard.is_username_commented(user_name):
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥ [{user_name}] –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω.")
        await update.message.reply_text(
            f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {formatted_user} –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞\n\n"
            f"<em>–ü—Ä–∏—á–∏–Ω–∞: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–ª –¥–æ—Å—Ç—É–ø</em>",
            parse_mode="HTML"
        )
        return

    if command == BotCommands.GET_CONFIG:
        logger.info(
            f"–°–æ–∑–¥–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é Zip-–∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard [{user_name}] "
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Tid [{requester_telegram_id}]."
        )
        
        zip_result = wireguard.create_zipfile(user_name)
        if zip_result.status:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            caption = (
                f"<b>üì¶ –ê—Ä—Ö–∏–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n"
                f"‚ïî‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"‚îÇ <i>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</i>\n"
                f"‚îÇ‚ñ∏ üìÑ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
                f"‚îÇ‚ñ∏ üì≤ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                f"‚ïö‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b> {formatted_user}\n\n"
                f"‚ïî‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"‚îÇ‚ñ∏ üìÇ –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤\n"
                f"‚îÇ‚ñ∏ üõ° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard\n"
                f"‚îÇ‚ñ∏ ‚ûï –ù–∞–∂–º–∏—Ç–µ ¬´–¥–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å¬ª (+)\n"
                f"‚îÇ‚ñ∏ üì∑ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
                f"‚îÇ‚ñ∏ ‚öôÔ∏è –ò–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ .conf —Ñ–∞–π–ª\n"
                f"‚ïö‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )
            
            await update.message.reply_document(
                document=open(zip_result.description, "rb"),
                caption=caption,
                parse_mode="HTML"
            )
            wireguard.remove_zipfile(user_name)
        else:
            logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –¥–ª—è {user_name}. –û—à–∏–±–∫–∞: [{zip_result.description}]')
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –¥–ª—è {formatted_user}\n"
                f"<em>–û—à–∏–±–∫–∞: {zip_result.description}</em>",
                parse_mode="HTML"
            )

    elif command == BotCommands.GET_QRCODE:
        logger.info(
            f"–°–æ–∑–¥–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é Qr-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard [{user_name}] "
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Tid [{requester_telegram_id}]."
        )
        
        png_path = wireguard.get_qrcode_path(user_name)
        if png_path.status:
            caption = (
                "<b>üì≤ QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\u2003\u2003\u2003\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b> {formatted_user}\n\n"
                "‚ïî‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                "‚îÇ‚ñ∏ üõ° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard\n"
                "‚îÇ‚ñ∏ ‚ûï –ù–∞–∂–º–∏—Ç–µ ¬´–¥–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å¬ª (+)\n"
                "‚îÇ‚ñ∏ üì∑ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
                "‚ïö‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )
            
            await update.message.reply_photo(
                photo=open(png_path.description, "rb"),
                caption=caption,
                parse_mode="HTML"
            )
        else:
            logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –¥–ª—è {user_name}. –û—à–∏–±–∫–∞: [{png_path.description}]')
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è {formatted_user}\n"
                f"<em>–û—à–∏–±–∫–∞: {png_path.description}</em>",
                parse_mode="HTML"
            )


@wrappers.command_lock
async def get_config_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /get_config: –≤—ã–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é .zip –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Wireguard.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å, —á—å–∏ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—É—á–∞—Ç—å.
    """
    await __get_config_or_qrcode_helper(
        update=update,
        context=context,
        command=BotCommands.GET_CONFIG,
        message=(
            "–í—ã–±–µ—Ä–µ—Ç–µ, —á—å–∏ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å."
        )
    )


@wrappers.command_lock
async def get_qrcode_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /get_qrcode: –≤—ã–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é QR-–∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Wireguard.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å, —á—å–∏ QR-–∫–æ–¥—ã –ø–æ–ª—É—á–∞—Ç—å.
    """
    await __get_config_or_qrcode_helper(
        update=update,
        context=context,
        command=BotCommands.GET_QRCODE,
        message=(
            "–í—ã–±–µ—Ä–µ—Ç–µ, —á—å–∏ Qr-–∫–æ–¥ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å."
        )
    )


async def __get_config_or_qrcode_helper(
    update: Update,
    context: CallbackContext,
    command: BotCommands,
    message: str
) -> None:
    if update.effective_user is None:
        return

    if update.message is None:
        return
    
    telegram_id = update.effective_user.id
    if telegram_id in config.telegram_admin_ids:
        if context.user_data is not None:
            context.user_data["command"] = command
        await update.message.reply_text(message,reply_markup=keyboards.CONFIG_MENU)
    else:
        await __get_configuration(update, command=command, telegram_id=telegram_id)
        await __end_command(update, context)
        

async def get_my_stats_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º).
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω—Ñ–∏–≥–∞–º WireGuard, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –∫ —Ç–µ–∫—É—â–µ–º—É Telegram ID.
    –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—É–¥–∞–ª—ë–Ω), –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º
    –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–∏—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ –ë–î.
    """
    if update.effective_user is None:
        return
    
    if update.message is None:
        return
    
    telegram_id = update.effective_user.id

    if not await __check_database_state(update):
        return

    wireguard_users = database.get_users_by_telegram_id(telegram_id)
    if not wireguard_users:
        await update.message.reply_text(
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Wireguard.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{BotCommands.REQUEST_NEW_CONFIG} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Ö —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        await __end_command(update, context)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    all_wireguard_stats = wireguard_stats.accumulate_wireguard_stats(
        conf_file_path=config.wireguard_config_filepath,
        json_file_path=config.wireguard_log_filepath,
        sort_by=wireguard_stats.SortBy.TRANSFER_SENT,
    )

    lines = []
    inactive_usernames = wireguard.get_inactive_usernames()
    
    for i, wg_user in enumerate(wireguard_users, start=1):
        user_data = all_wireguard_stats.get(wg_user, None)

        # –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
        if user_data is None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ñ–∏–≥ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏
            check_result = wireguard.check_user_exists(wg_user)
            if check_result.status:
                remove_result = wireguard.remove_user(wg_user)
                if remove_result.status:
                    logger.info(remove_result.description)
                else:
                    logger.error(remove_result.description)

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î, –Ω–æ –∫–æ–Ω—Ñ–∏–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            if database.delete_user(wg_user):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{wg_user}] —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            else:
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [{wg_user}] –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
                )

            continue

        # –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        lines.append(
            f"\n<b>{i}]</b>] <b>üåê –ö–æ–Ω—Ñ–∏–≥:</b> <i>{wg_user}</i> "
            f"{'üî¥ <b>[–ù–µ–∞–∫—Ç–∏–≤–µ–Ω]</b>' if wg_user in inactive_usernames else 'üü¢ <b>[–ê–∫—Ç–∏–≤–µ–Ω]</b>'}\n"
            f"   üì° IP: {user_data.allowed_ips}\n"
            f"   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_data.transfer_received if user_data.transfer_received else 'N/A'}\n"
            f"   üì• –ü–æ–ª—É—á–µ–Ω–æ: {user_data.transfer_sent if user_data.transfer_sent else 'N/A'}\n"
            f"   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª–∏—á–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–∞–º Wireguard -> Tid [{telegram_id}].")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
    batch_size = 5
    batched_lines = [
        lines[i:i + batch_size]
        for i in range(0, len(lines), batch_size)
    ]
    
    await telegram_utils.send_batched_messages(
        update=update,
        batched_lines=batched_lines,
        parse_mode=None,
        groups_before_delay=2,
        delay_between_groups=0.5
    )

    await __end_command(update, context)


@wrappers.admin_required
async def get_all_stats_command(update: Update, context: CallbackContext) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ WireGuard, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
    (Telegram ID –∏ username). –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–º–µ—Ç–∫—É.
    """
    if update.message is None:
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    all_wireguard_stats = wireguard_stats.accumulate_wireguard_stats(
        conf_file_path=config.wireguard_config_filepath,
        json_file_path=config.wireguard_log_filepath,
        sort_by=wireguard_stats.SortBy.TRANSFER_SENT,
    )

    if not all_wireguard_stats:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∏ –æ–¥–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É.")
        await __end_command(update, context)
        return

    if not await __check_database_state(update):
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∫–∏ (–≤–ª–∞–¥–µ–ª–µ—Ü <-> –∫–æ–Ω—Ñ–∏–≥)
    linked_users = database.get_all_linked_data()
    linked_dict = {user_name: tid for tid, user_name in linked_users}

    # –î–æ—Å—Ç–∞–µ–º username –¥–ª—è –≤—Å–µ—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (bulk-–∑–∞–ø—Ä–æ—Å)
    linked_telegram_ids = set(linked_dict.values())
    linked_telegram_names_dict = await telegram_utils.get_usernames_in_bulk(
        linked_telegram_ids, context, semaphore
    )

    lines = []
    inactive_usernames = wireguard.get_inactive_usernames()
    
    for i, (wg_user, user_data) in enumerate(all_wireguard_stats.items(), start=1):
        owner_tid = linked_dict.get(wg_user)
        if owner_tid is not None:
            owner_username = linked_telegram_names_dict.get(owner_tid, "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            owner_part = f" üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_username} (ID: {owner_tid})"
        else:
            owner_part = " üë§ –í–ª–∞–¥–µ–ª–µ—Ü: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

        status_icon = "üî¥ [–ù–ï–ê–ö–¢–ò–í–ï–ù]" if wg_user in inactive_usernames else "üü¢ [–ê–ö–¢–ò–í–ï–ù]"

        lines.append(
            f"\n{i}] üåê –ö–æ–Ω—Ñ–∏–≥: {wg_user} {status_icon}\n"
            f"   {owner_part}\n"
            f"   üì° IP: {user_data.allowed_ips}\n"
            f"   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {(user_data.transfer_sent if user_data.transfer_sent else 'N/A').ljust(10)}"
            f"   üì• –ü–æ–ª—É—á–µ–Ω–æ: {user_data.transfer_received if user_data.transfer_received else 'N/A'}\n"
            f"   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )

    tid = -1
    if update.effective_user is not None:
        tid = update.effective_user.id
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–æ–Ω—Ñ–∏–≥–∞–º Wireguard -> Tid [{tid}].")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
    batch_size = 5
    batched_lines = [
        lines[i:i + batch_size]
        for i in range(0, len(lines), batch_size)
    ]
    
    await telegram_utils.send_batched_messages(
        update=update,
        batched_lines=batched_lines,
        parse_mode=None,
        groups_before_delay=2,
        delay_between_groups=0.5
    )

    await __end_command(update, context)


@wrappers.admin_required
async def reload_wireguard_server_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ Wireguard.
    """
    if update.message is not None:
        await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é —Å–µ—Ä–≤–µ—Ä WireGuard...")
    
    try:
        # await asyncio.to_thread(wireguard_utils.log_and_restart_wireguard)
        success = await __async_restart_wireguard()
        response = (
            "‚úÖ –°–µ—Ä–≤–µ—Ä WireGuard —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!"
            if success
            else "‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å Wireguard!"
        )
    except Exception as e:
        response = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
        
    if update.message is not None:
        await update.message.reply_text(response)

    await __end_command(update, context)


async def __async_restart_wireguard() -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ WireGuard.
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–ª–æ–∫–∏—Ä—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop.
    
    Returns:
        bool: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            - True: –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            - False: –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
            
    Raises:
        Exception: –õ—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ wireguard_utils.log_and_restart_wireguard 
            –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω—ã –∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ –ø—Ä–æ–±—Ä–æ—à–µ–Ω—ã –≤—ã—à–µ
            
    Notes:
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π ThreadPoolExecutor
        - –Ø–≤–ª—è–µ—Ç—Å—è internal-—Ñ—É–Ω–∫—Ü–∏–µ–π (–Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞)
    """
    loop = asyncio.get_running_loop()   
    try:
        return await loop.run_in_executor(
            None,
            wireguard_utils.log_and_restart_wireguard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return False


async def reload_wireguard_server_schedule():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ WireGuard.
    
    Features:
        - –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —á–µ—Ä–µ–∑ APScheduler
        - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Behavior:
        1. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ __async_restart_wireguard()
        2. –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        3. –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ª—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        
    Schedule:
        - –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        - –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π
        
    Notes:
        - –ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π
        - –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    """
    logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ Wireguard...")
    try:
        success = await __async_restart_wireguard()
        logger.info(f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞: {'—É—Å–ø–µ—à–Ω–æ' if success else '–Ω–µ—É–¥–∞—á–Ω–æ'}!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {str(e)}")


def setup_scheduler():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á.
    
    Actions:
        1. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é job-–∑–∞–¥–∞—á—É
        2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä —Ç–∏–ø–∞ IntervalTrigger
        3. –ó–∞–ø—É—Å–∫–∞–µ—Ç scheduler
        
    Job Parameters:
        - –§—É–Ω–∫—Ü–∏—è: reload_wireguard_server_schedule
        - –¢—Ä–∏–≥–≥–µ—Ä: –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π (7 –¥–Ω–µ–π)
        - –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        
    Architecture:
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AsyncIOScheduler –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å asyncio
        - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–æ–º –∂–µ event loop, —á—Ç–æ –∏ Telegram –±–æ—Ç
        
    Notes:
        - –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        - –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ scheduler.shutdown()
    """
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    
    scheduler = AsyncIOScheduler(event_loop=loop)  # –ü–µ—Ä–µ–¥–∞—ë–º loop —è–≤–Ω–æ
    scheduler.add_job(
        reload_wireguard_server_schedule,
        trigger=IntervalTrigger(days=7),
        next_run_time=datetime.now() + timedelta(seconds=10)
    )
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")
    loop.run_forever()  # –î–µ—Ä–∂–∏–º event loop –∞–∫—Ç–∏–≤–Ω—ã–º


async def unknown_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    """
    if update.message is not None:
        await update.message.reply_text(
            f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{BotCommands.HELP} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )


# ---------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ----------------------


async def handle_text(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–≤–æ–¥—è—Ç –∏–º–µ–Ω–∞
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.
    """
    clear_command_flag = True
    try:
        if context.user_data is None:
            return
        
        if update.message is None:
            return
        
        current_command = context.user_data.get("command", None)

        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é
        if current_command is None:
            if update.effective_user is not None:
                await update.message.reply_text(
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é. (/{BotCommands.MENU})",
                    reply_markup=(
                        keyboards.ADMIN_MENU
                        if update.effective_user.id in config.telegram_admin_ids
                        else keyboards.USER_MENU
                    ),
                )
            clear_command_flag = False
            return

        # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ¬´–ó–∞–∫—Ä—ã—Ç—å¬ª?
        if update.message.text == keyboards.BUTTON_CLOSE.text:
            if await __close_button_handler(update, context):
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Own Config / Wg User Config
        if (
            current_command in (BotCommands.GET_CONFIG, BotCommands.GET_QRCODE)
            and update.message.text in (
                keyboards.BUTTON_OWN.text,
                keyboards.BUTTON_WG_USER_CONFIG.text
            )
        ):
            if await __get_config_buttons_handler(update, context):
                clear_command_flag = False
                return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Bind to YourSelf
        if (
            current_command == BotCommands.BIND_USER
            and update.message.text == keyboards.BUTTON_BIND_TO_YOURSELF.text
        ):
            if update.effective_user is not None:
                await __delete_message(update, context)
                await __bind_users(update, context, update.effective_user.id)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Unbind from YourSelf
        if (
            current_command == BotCommands.UNBIND_TELEGRAM_ID
            and update.message.text == keyboards.BUTTON_UNBIND_FROM_YOURSELF.text
        ):
            if update.effective_user is not None:
                await __delete_message(update, context)
                await __unbind_telegram_id(update, context, update.effective_user.id)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Own
        if (
            current_command == BotCommands.GET_USERS_BY_ID
            and update.message.text == keyboards.BUTTON_OWN.text
        ):
            if update.effective_user is not None:
                await __delete_message(update, context)
                await __get_bound_users_by_tid(update, context, update.effective_user.id)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ /cancel
        if update.message.text is not None and update.message.text.lower() == f'/{BotCommands.CANCEL}':
            await cancel_command(update, context)
            clear_command_flag = False
            return

        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞
        if current_command == BotCommands.SEND_MESSAGE:
            await __send_message_to_all(update, context)
            return

        need_restart_wireguard = False
        if update.message.text is not None:
            entries = update.message.text.split()
        else:
            entries = []

        for entry in entries:
            ret_val = None

            if current_command == BotCommands.ADD_USER:
                ret_val = await __add_user(update, context, entry)

            elif current_command == BotCommands.REMOVE_USER:
                ret_val = await __rem_user(update, entry)

            elif current_command == BotCommands.COM_UNCOM_USER:
                ret_val = await __com_user(update, entry)

            elif current_command in (BotCommands.BIND_USER, BotCommands.SEND_CONFIG):
                ret_val = await __create_list_of_wireguard_users(update, context, entry)

            elif current_command == BotCommands.UNBIND_USER:
                await __unbind_user(update, entry)

            elif current_command in (BotCommands.GET_CONFIG, BotCommands.GET_QRCODE):
                await __get_user_configuration(update, current_command, entry)

            if ret_val is not None:
                # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–æ—à–∏–±–∫–∞ –∏–ª–∏ —É—Å–ø–µ—Ö)
                await update.message.reply_text(ret_val.description)
                if ret_val.status:
                    logger.info(ret_val.description)
                    need_restart_wireguard = True
                else:
                    logger.error(ret_val.description)

        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ WireGuard –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if need_restart_wireguard:
            restart_thread = threading.Thread(
                target=wireguard_utils.log_and_restart_wireguard, daemon=True
            )
            restart_thread.start()
            need_restart_wireguard = False

        # –î–ª—è add_user / bind_user –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        if current_command in (BotCommands.ADD_USER, BotCommands.BIND_USER):
            if len(context.user_data["wireguard_users"]) > 0 and update.message:
                await update.message.reply_text(
                    (
                        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram "
                        "–¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ Wireguard.\n\n"
                        "–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–≤—è–∑—ã–≤–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å."
                    ),
                    reply_markup=keyboards.BIND_MENU,
                )
                clear_command_flag = False

        # –î–ª—è /send_config ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
        elif current_command == BotCommands.SEND_CONFIG:
            if len(context.user_data["wireguard_users"]) > 0 and update.message:
                await update.message.reply_text(
                    (
                        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram,"
                        " –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ Wireguard.\n\n"
                        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å."
                    ),
                    reply_markup=keyboards.SEND_MENU,
                )
                clear_command_flag = False

    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if update.message is not None:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )
    finally:
        if clear_command_flag:
            await __end_command(update, context)


async def handle_user_request(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —à–ª—ë—Ç –∑–∞–ø—Ä–æ—Å
    —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞ Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (filters.StatusUpdate.USER_SHARED).
    """
    clear_command_flag = True
    try:
        await __delete_message(update, context)

        if context.user_data is None:
            return
        
        if update.message is None:
            return

        current_command = context.user_data.get("command", None)
        if current_command is None:
            if update.effective_user is not None:
                await update.message.reply_text(
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é. (/{BotCommands.MENU})",
                    reply_markup=(
                        keyboards.ADMIN_MENU
                        if update.effective_user.id in config.telegram_admin_ids
                        else keyboards.USER_MENU
                    ),
                )
            clear_command_flag = False
            return

        if update.message.users_shared is None:
            return

        for shared_user in update.message.users_shared.users:
            if current_command in (BotCommands.ADD_USER, BotCommands.BIND_USER):
                await __bind_users(update, context, shared_user.user_id)

            elif current_command == BotCommands.UNBIND_TELEGRAM_ID:
                await __unbind_telegram_id(update, context, shared_user.user_id)

            elif current_command == BotCommands.GET_USERS_BY_ID:
                await __get_bound_users_by_tid(update, context, shared_user.user_id)

            elif current_command in (BotCommands.GET_CONFIG, BotCommands.GET_QRCODE):
                await __get_configuration(update, current_command, shared_user.user_id)

            elif current_command == BotCommands.SEND_CONFIG:
                await __send_config(update, context, shared_user)

    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if update.message is not None:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )
    finally:
        if clear_command_flag:
            await __end_command(update, context)


# ---------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------------------


async def __get_config_buttons_handler(update: Update, context: CallbackContext) -> bool:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ (Own Config –∏–ª–∏ Wg User Config) –¥–ª—è –∫–æ–º–∞–Ω–¥ get_qrcode / get_config.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥ handle_text.
    """
    if context.user_data is None:
        return False
        
    if update.message is None:
        return False

    current_command = context.user_data.get("command", None)
    if current_command in (BotCommands.GET_CONFIG, BotCommands.GET_QRCODE):
        await __delete_message(update, context)

        if update.message.text == keyboards.BUTTON_OWN.text and update.effective_user is not None:
            await __get_configuration(update, current_command, update.effective_user.id)
            await __end_command(update, context)
            return True

        elif update.message.text == keyboards.BUTTON_WG_USER_CONFIG.text:
            await update.message.reply_text(messages.ENTER_WIREGUARD_USERNAMES_MESSAGE)
            return True
    return False


async def __close_button_handler(update: Update, context: CallbackContext) -> bool:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ó–∞–∫—Ä—ã—Ç—å (BUTTON_CLOSE).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥ handle_text.
    """
    if not context.user_data:
        return False
    
    current_command = context.user_data.get("command", None)

    if current_command in (BotCommands.ADD_USER, BotCommands.BIND_USER):
        await __delete_message(update, context)
        user_names = context.user_data["wireguard_users"]
        if update.message is not None:
            await update.message.reply_text(
                (
                    f"–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "
                    f'[{", ".join([f"<code>{name}</code>" for name in sorted(user_names)])}] '
                    f"–æ—Ç–º–µ–Ω–µ–Ω–æ."
                ),
                parse_mode="HTML",
            )
        return True

    elif current_command in (
        BotCommands.UNBIND_TELEGRAM_ID,
        BotCommands.GET_USERS_BY_ID,
        BotCommands.GET_CONFIG,
        BotCommands.GET_QRCODE,
        BotCommands.SEND_CONFIG,
    ):
        await __delete_message(update, context)
        if update.message is not None:
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return True
    return False


async def __delete_message(update: Update, context: CallbackContext) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞ (–æ–±—ã—á–Ω–æ –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É).
    """
    if update.message is not None:
        try:
            await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


async def __send_message_to_all(update: Update, context: CallbackContext) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ –ë–î (get_all_telegram_users).
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ë–î.
    """
    for tid in database.get_all_telegram_users():
        try:
            if update.message is not None:
                await context.bot.send_message(chat_id=tid, text=update.message.text)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tid}")
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tid}: {e}")
            database.delete_telegram_user(tid)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tid} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


async def __validate_username(update: Update, user_name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã).
    """
    if not telegram_utils.validate_username(user_name):
        if update.message is not None:
            await update.message.reply_text(
                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user_name}]. "
                f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã."
            )
        return False
    return True


async def __validate_telegram_id(update: Update, tid: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å Telegram ID (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
    """
    if not telegram_utils.validate_telegram_id(tid):
        if update.message is not None:
            await update.message.reply_text(
                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram ID [{tid}]. "
                f"Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."
            )
        return False
    return True


async def __add_user(
    update: Update, context: CallbackContext, user_name: str
) -> Optional[wireguard_utils.FunctionResult]:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard. –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É .zip-–∫–æ–Ω—Ñ–∏–≥.
    """
    if not await __validate_username(update, user_name):
        return None

    add_result = wireguard.add_user(user_name)
    if add_result.status:
        zip_result = wireguard.create_zipfile(user_name)
        if zip_result.status and update.message:
            await update.message.reply_document(document=open(zip_result.description, "rb"))
            wireguard.remove_zipfile(user_name)
            if context.user_data is not None:
                context.user_data["wireguard_users"].append(user_name)
    return add_result


async def __rem_user(
    update: Update, user_name: str
) -> Optional[wireguard_utils.FunctionResult]:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å—å –æ –Ω—ë–º –∏–∑ –ë–î (–µ—Å–ª–∏ –µ—Å—Ç—å).
    """
    if not await __validate_username(update, user_name):
        return None

    remove_result = wireguard.remove_user(user_name)
    if remove_result.status:
        if await __check_database_state(update):
            if not database.delete_user(user_name):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [{user_name}] –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
                if update.message is not None:
                    await update.message.reply_text(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [{user_name}] –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
                    )
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    return remove_result


async def __com_user(
    update: Update, user_name: str
) -> Optional[wireguard_utils.FunctionResult]:
    """
    –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –∏–ª–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç (–±–ª–æ–∫–∏—Ä—É–µ—Ç/—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard.
    """
    if not await __validate_username(update, user_name):
        return None
    return wireguard.comment_or_uncomment_user(user_name)


async def __create_list_of_wireguard_users(
    update: Update, context: CallbackContext, user_name: str
) -> Optional[wireguard_utils.FunctionResult]:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ user_name –≤ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∑–∞—Ç–µ–º —Å–≤—è–∑–∞—Ç—å –∏—Ö —Å Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    (–ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥).
    """
    if not await __validate_username(update, user_name):
        return None

    check_result = wireguard.check_user_exists(user_name)
    if check_result.status:
        if context.user_data is not None:
            context.user_data["wireguard_users"].append(user_name)
        return None
    return check_result


async def __unbind_user(update: Update, user_name: str) -> None:
    """
    –û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard –ø–æ –µ–≥–æ user_name (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ë–î).
    """
    if not await __validate_username(update, user_name):
        return

    if not await __check_database_state(update):
        return

    if database.user_exists(user_name):
        if database.delete_user(user_name):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.")
            if update.message is not None:
                await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user_name}].")
            if update.message is not None:
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user_name}].")
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–º—É Telegram ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        if update.message is not None:
            await update.message.reply_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–º—É Telegram ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )


async def __bind_users(update: Update, context: CallbackContext, tid: int) -> None:
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Wireguard-–∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏–∑ context.user_data['wireguard_users']
    –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É Telegram ID (tid).
    """
    if not await __check_database_state(update):
        return

    if context.user_data is None:
        return

    telegram_username = await telegram_utils.get_username_by_id(tid, context)

    for user_name in context.user_data["wireguard_users"]:
        if not database.user_exists(user_name):
            # user_name –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ω–∏–∫–æ–º—É
            if database.add_user(tid, user_name):
                logger.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ [{telegram_username} ({tid})]."
                )
                if update.message is not None:
                    await update.message.reply_text(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É—Å–ø–µ—à–Ω–æ "
                        f"–ø—Ä–∏–≤—è–∑–∞–Ω –∫ [{telegram_username} ({tid})]."
                    )
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user_name}].")
                if update.message is not None:
                    await update.message.reply_text(
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö [{user_name}] –≤ –±–∞–∑—É. "
                        f"–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
                    )
        else:
            # user_name —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
            already_tid = database.get_telegram_id_by_user(user_name)[0]
            already_username = await telegram_utils.get_username_by_id(already_tid, context)
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω "
                f"–∫ [{already_username} ({already_tid})] –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            if update.message is not None:
                await update.message.reply_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_name}] —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ "
                    f"[{already_username} ({already_tid})] –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                )


async def __unbind_telegram_id(update: Update, context: CallbackContext, tid: int) -> None:
    """
    –û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ Wireguard-–∫–æ–Ω—Ñ–∏–≥–∏ –æ—Ç Telegram ID (tid).
    """
    if not await __validate_telegram_id(update, tid):
        return

    if not await __check_database_state(update):
        return

    telegram_username = await telegram_utils.get_username_by_id(tid, context)

    if database.telegram_id_exists(tid):
        if database.delete_users_by_telegram_id(tid):
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Wireguard —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω—ã –æ—Ç [{telegram_username} ({tid})]."
            )
            if update.message is not None:
                await update.message.reply_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Wireguard —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω—ã "
                    f"–æ—Ç [{telegram_username} ({tid})]."
                )
        else:
            logger.info(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard –æ—Ç [{telegram_username} ({tid})]."
            )
            if update.message is not None:
                await update.message.reply_text(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard "
                    f"–æ—Ç [{telegram_username} ({tid})]."
                )
    else:
        logger.info(
                f"–ù–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω "
                f"–∫ [{telegram_username} ({tid})] –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
        if update.message is not None:
            await update.message.reply_text(
                f"–ù–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω "
                f"–∫ [{telegram_username} ({tid})] –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )


async def __get_bound_users_by_tid(update: Update, context: CallbackContext, tid: int) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ user_name –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ Telegram ID (tid).
    """
    if not await __validate_telegram_id(update, tid):
        return

    if not await __check_database_state(update):
        return

    telegram_username = await telegram_utils.get_username_by_id(tid, context)

    if database.telegram_id_exists(tid):
        user_names = database.get_users_by_telegram_id(tid)
        if update.message is not None:
            await update.message.reply_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Wireguard, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫ [{telegram_username} ({tid})]: "
                f"[{', '.join([f'<code>{u}</code>' for u in sorted(user_names)])}].",
                parse_mode="HTML",
            )
    else:
        logger.info(
                f"–ù–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω "
                f"–∫ [{telegram_username} ({tid})] –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
        if update.message is not None:
            await update.message.reply_text(
                f"–ù–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω "
                f"–∫ [{telegram_username} ({tid})] –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )


async def __send_config(update: Update, context: CallbackContext, telegram_user: SharedUser) -> None:
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (telegram_user) zip-—Ñ–∞–π–ª—ã –∏ QR-–∫–æ–¥—ã
    –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏–∑ context.user_data['wireguard_users'].
    """
    if not await __check_database_state(update):
        return
    
    if context.user_data is None:
        return

    tid = telegram_user.user_id
    telegram_username = telegram_user.username or "NoUsername"

    for user_name in context.user_data["wireguard_users"]:
        check_result = wireguard.check_user_exists(user_name)
        if not check_result.status:
            logger.error(f"–ö–æ–Ω—Ñ–∏–≥ [{user_name}] –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            if update.message is not None:
                await update.message.reply_text(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è [{user_name}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if wireguard.is_username_commented(user_name):
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥ [{user_name}] –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω.")
            if update.message is not None:
                await update.message.reply_text(
                    f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è [{user_name}] –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞."
                )
            return

        logger.info(
            f"–°–æ–∑–¥–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é Zip-–∞—Ä—Ö–∏–≤ –∏ Qr-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard [{user_name}] "
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [@{telegram_username} ({tid})]."
        )
        zip_result = wireguard.create_zipfile(user_name)
        try:
            if zip_result.status:
                await context.bot.send_message(chat_id=tid, text="–í–∞—à –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ Wireguard.")
                await context.bot.send_document(chat_id=tid, document=open(zip_result.description, "rb"))
                wireguard.remove_zipfile(user_name)

                png_path = wireguard.get_qrcode_path(user_name)
                if png_path.status:
                    await context.bot.send_photo(chat_id=tid, photo=open(png_path.description, "rb"))

                current_admin_id = -1
                current_admin_name = "NoUsername"
                
                if update.effective_user is not None:
                    current_admin_id = update.effective_user.id
                    current_admin_name = await telegram_utils.get_username_by_id(current_admin_id, context)

                # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –¥–µ–π—Å—Ç–≤–∏–∏
                text = (
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä [{current_admin_name} ({current_admin_id})] –æ—Ç–ø—Ä–∞–≤–∏–ª "
                    f"—Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Wireguard [{user_name}] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
                    f"[@{telegram_username} ({tid})]."
                )
                for admin_id in config.telegram_admin_ids:
                    if admin_id == current_admin_id:
                        continue
                    try:
                        await context.bot.send_message(chat_id=admin_id, text=text)
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è [{admin_id}]: {text}")
                    except TelegramError as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}.")
                        if update.message is not None:
                            await update.message.reply_text(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}."
                            )

        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tid}: {e}.")
            if update.message is not None:
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tid}: {e}.")


# ---------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ----------------------


async def error_handler(update: object, context: CallbackContext) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ –±–æ—Ç–µ.
    """
    try:
        if context.error is not None:
            raise context.error
    except TimedOut:
        logger.error("Request timed out. Retrying...")
    except BadRequest as e:
        logger.error(f"Bad request: {e}")
    except NetworkError:
        logger.error("Network error occurred. Retrying...")
    except RetryAfter as e:
        logger.error(f"Rate limit exceeded. Retry in {e.retry_after} seconds.")


# ---------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ----------------------


def main() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ (Long Polling).
    """
    token = config.telegram_token

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫ Wireguard
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=setup_scheduler, daemon=True)
    # scheduler_thread.start()

    application = (
        ApplicationBuilder()
        .token(token)
        .read_timeout(7)                 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Telegram
        .write_timeout(10)               # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤)
        .connect_timeout(5)              # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        .pool_timeout(1)                 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞
        .get_updates_read_timeout(30)    # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Long Polling
        .build()
    )

    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler(BotCommands.START, start_command))
    application.add_handler(CommandHandler(BotCommands.HELP, help_command))
    application.add_handler(CommandHandler(BotCommands.MENU, menu_command))
    application.add_handler(CommandHandler(BotCommands.CANCEL, cancel_command))

    # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Wireguard
    application.add_handler(CommandHandler(BotCommands.ADD_USER, add_user_command))
    application.add_handler(CommandHandler(BotCommands.REMOVE_USER, remove_user_command))
    application.add_handler(CommandHandler(BotCommands.COM_UNCOM_USER, com_uncom_user_command))
    application.add_handler(CommandHandler(BotCommands.SHOW_USERS_STATE, show_users_state_command))

    # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    application.add_handler(CommandHandler(BotCommands.BIND_USER, bind_user_command))
    application.add_handler(CommandHandler(BotCommands.UNBIND_USER, unbind_user_command))
    application.add_handler(CommandHandler(BotCommands.UNBIND_TELEGRAM_ID, unbind_telegram_id_command))
    application.add_handler(CommandHandler(BotCommands.GET_USERS_BY_ID, get_bound_users_by_telegram_id_command))
    application.add_handler(CommandHandler(BotCommands.SHOW_ALL_BINDINGS, show_all_bindings_command))

    # –ö–æ–º–∞–Ω–¥—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    application.add_handler(CommandHandler(BotCommands.GET_CONFIG, get_config_command))
    application.add_handler(CommandHandler(BotCommands.GET_QRCODE, get_qrcode_command))
    application.add_handler(CommandHandler(BotCommands.REQUEST_NEW_CONFIG, request_new_config_command))
    application.add_handler(CommandHandler(BotCommands.SEND_CONFIG, send_config_command))

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    application.add_handler(CommandHandler(BotCommands.GET_TELEGRAM_ID, get_telegram_id_command))
    application.add_handler(CommandHandler(BotCommands.GET_TELEGRAM_USERS, get_telegram_users_command))
    application.add_handler(CommandHandler(BotCommands.SEND_MESSAGE, send_message_command))

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ Wireguard
    application.add_handler(CommandHandler(BotCommands.GET_MY_STATS, get_my_stats_command))
    application.add_handler(CommandHandler(BotCommands.GET_ALL_STATS, get_all_stats_command))

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    application.add_handler(CommandHandler(BotCommands.RELOAD_WG_SERVER, reload_wireguard_server_command))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.StatusUpdate.USER_SHARED, handle_user_request))
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(timeout=10)


if __name__ == "__main__":
    try:
        if not database.db_loaded:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: [{config.users_database_path}]!")
        else:
            main()
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: [{e}]")
