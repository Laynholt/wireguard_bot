from .base import *
from libs.telegram import messages

from telegram import (
    KeyboardButton,
    KeyboardButtonRequestUsers,
    ReplyKeyboardMarkup
)


class GetWireguardConfigOrQrcodeCommand(BaseCommand):
    def __init__(
        self,
        database: UserDatabase,
        telegram_admin_ids: Iterable[TelegramId],
        return_config: bool
    ) -> None:
        super().__init__(
            database
        )
    
        self.command_name = BotCommand.GET_CONFIG if return_config else BotCommand.GET_QRCODE
        self.keyboard = Keyboard(
            title=BotCommand.GET_CONFIG.pretty_text if return_config else BotCommand.GET_QRCODE.pretty_text,
            reply_keyboard=ReplyKeyboardMarkup(
                ((
                    KeyboardButton(
                        text=keyboards.ButtonText.TELEGRAM_USER.value.text,
                        request_users=KeyboardButtonRequestUsers(
                            request_id=0,
                            user_is_bot=False,
                            request_username=True,
                        )
                    ),
                    keyboards.ButtonText.WIREGUARD_USER.value.text
                    ), (
                        keyboards.ButtonText.OWN.value.text,
                        keyboards.ButtonText.CANCEL.value.text,
                    )
                ),
                one_time_keyboard=True
            )
        )
        self.keyboard.add_parent(keyboards.WIREGUARD_CONFIG_KEYBOARD)
        
        self.telegram_admin_ids= telegram_admin_ids
    
    
    async def request_input(self, update: Update, context: CallbackContext):
        """
        –ö–æ–º–∞–Ω–¥–∞ /get_config: –≤—ã–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é .zip –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Wireguard.
        –ö–æ–º–∞–Ω–¥–∞ /get_qrcode: –≤—ã–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é QR-–∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Wireguard.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å, —á—å–∏ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—É—á–∞—Ç—å.
        """
        if update.effective_user is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Update effective_user is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return

        if update.message is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Update message is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return
        
        if self.keyboard is None:
            return
        
        telegram_id = update.effective_user.id
        if telegram_id in self.telegram_admin_ids:
            if context.user_data is not None:
                context.user_data[ContextDataKeys.COMMAND] = self.command_name
            
            message=(
                f"–í—ã–±–µ—Ä–µ—Ç–µ, —á—å–∏ {'Qr-–∫–æ–¥ —Ñ–∞–π–ª—ã' if self.command_name == BotCommand.GET_QRCODE else '—Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'}"
                " –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å.\n\n"
                f"–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '{keyboards.ButtonText.CANCEL}'."
            )    
            
            await update.message.reply_text(
                message,
                reply_markup=self.keyboard.reply_keyboard
            )
        else:
            await self.__get_configuration(update, context, telegram_id)
            await self._end_command(update, context)


    async def execute(self, update: Update, context: CallbackContext) -> Optional[bool]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –¥–∞–Ω–Ω–æ–º—É Telegram.
        """
        if await self._buttons_handler(update, context):
            return
        
        if context.user_data is None or update.message is None:
            await self._end_command(update, context)
            return
    
        entries = update.message.text.split() if update.message.text is not None else []
        if entries:
            for entry in entries:
                await self.__get_user_configuration(update, entry)
        
        else:
            if update.message.users_shared is None:
                await self._end_command(update, context)
                return
            
            for shared_user in update.message.users_shared.users:
                await self.__get_configuration(
                    update, context, shared_user.user_id
                )

        await self._end_command(update, context)


    async def __get_configuration(self, update: Update, context: CallbackContext, telegram_id: TelegramId) -> None:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤/QR-–∫–æ–¥–∞.
        """
        if update.effective_user is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Update effective_user is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return
        
        if update.message is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Update message is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return
        
        if not self.database.db_loaded:
            logger.error("–û—à–∏–±–∫–∞! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            await update.message.reply_text(
                "üõë <b>–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.\n"
                "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                parse_mode="HTML"
            )
            return

        user_names = self.database.get_users_by_telegram_id(telegram_id)
        if not user_names:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Tid [{telegram_id}] –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            if telegram_id == update.effective_user.id:
                await update.message.reply_text(
                    "üìÅ <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π WireGuard.</b>\n\n"
                    f"üìù <em>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{BotCommand.REQUEST_NEW_CONFIG}, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å "
                    f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.</em>",
                    parse_mode="HTML"
                )
            else:
                await update.message.reply_text(
                    (
                        "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Tid "
                        f"{await telegram_utils.get_username_by_id(telegram_id, context) or '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è'}"
                        f" (<code>{telegram_id}</code>) –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n\n"
                    ),
                    parse_mode="HTML"
                )
            return

        for user_name in user_names:
            await self.__get_user_configuration(update, user_name)


    async def __get_user_configuration(self, update: Update, user_name: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é .zip-–∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ QR-–∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        if update.effective_user is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Update effective_user is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return
        
        if update.message is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Update message is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return
        
        requester_telegram_id = update.effective_user.id

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        formatted_user = f"üîê <em>{user_name}</em>"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        user_exists_result = wireguard.check_user_exists(user_name)
        if not user_exists_result.status:
            logger.error(f"–ö–æ–Ω—Ñ–∏–≥ [{user_name}] –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–¥–∞–ª—è—é –ø—Ä–∏–≤—è–∑–∫—É.")
            await update.message.reply_text(
                f"üö´ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {formatted_user} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!\n\n"
                f"üìù <em>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{BotCommand.REQUEST_NEW_CONFIG}, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å "
                f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.</em>",
                parse_mode="HTML"
            )
            self.database.delete_user(user_name)
            return

        if wireguard.is_username_commented(user_name):
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥ [{user_name}] –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω.")
            await update.message.reply_text(
                f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {formatted_user} –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"<em>–ü—Ä–∏—á–∏–Ω–∞: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–ª –¥–æ—Å—Ç—É–ø</em>",
                parse_mode="HTML"
            )
            return

        if self.command_name == BotCommand.GET_CONFIG:
            logger.info(
                f"–°–æ–∑–¥–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é Zip-–∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard [{user_name}] "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Tid [{requester_telegram_id}]."
            )
            
            zip_result = wireguard.create_zipfile(user_name)
            if zip_result.status:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                caption = (
                    f"<b>üì¶ –ê—Ä—Ö–∏–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n"
                    f"‚ïî‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"‚îÇ <i>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</i>\n"
                    f"‚îÇ‚ñ∏ üìÑ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
                    f"‚îÇ‚ñ∏ üì≤ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                    f"‚ïö‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b> {formatted_user}\n\n"
                    f"‚ïî‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"‚îÇ‚ñ∏ üìÇ –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤\n"
                    f"‚îÇ‚ñ∏ üõ° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard\n"
                    f"‚îÇ‚ñ∏ ‚ûï –ù–∞–∂–º–∏—Ç–µ ¬´–¥–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å¬ª (+)\n"
                    f"‚îÇ‚ñ∏ üì∑ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
                    f"‚îÇ‚ñ∏ ‚öôÔ∏è –ò–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ .conf —Ñ–∞–π–ª\n"
                    f"‚ïö‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                )
                
                await update.message.reply_document(
                    document=open(zip_result.description, "rb"),
                    caption=caption,
                    parse_mode="HTML"
                )
                wireguard.remove_zipfile(user_name)
            else:
                logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –¥–ª—è {user_name}. –û—à–∏–±–∫–∞: [{zip_result.description}]')
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –¥–ª—è {formatted_user}!\n"
                    f"<em>–û—à–∏–±–∫–∞: {zip_result.description}</em>",
                    parse_mode="HTML"
                )

        elif self.command_name == BotCommand.GET_QRCODE:
            logger.info(
                f"–°–æ–∑–¥–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é Qr-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard [{user_name}] "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Tid [{requester_telegram_id}]."
            )
            
            png_path = wireguard.get_qrcode_path(user_name)
            if png_path.status:
                caption = (
                    "<b>üì≤ QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\u2003\u2003\u2003\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b> {formatted_user}\n\n"
                    "‚ïî‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "‚îÇ‚ñ∏ üõ° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard\n"
                    "‚îÇ‚ñ∏ ‚ûï –ù–∞–∂–º–∏—Ç–µ ¬´–¥–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å¬ª (+)\n"
                    "‚îÇ‚ñ∏ üì∑ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
                    "‚ïö‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                )
                
                await update.message.reply_photo(
                    photo=open(png_path.description, "rb"),
                    caption=caption,
                    parse_mode="HTML"
                )
            else:
                logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –¥–ª—è {user_name}. –û—à–∏–±–∫–∞: [{png_path.description}]')
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è {formatted_user}\n"
                    f"<em>–û—à–∏–±–∫–∞: {png_path.description}</em>",
                    parse_mode="HTML"
                )


    async def _buttons_handler(self, update: Update, context: CallbackContext) -> bool:
        if await self._cancel_button_handler(update, context):
            await self._end_command(update, context)
            return True
        
        if (
            update.message is not None
            and update.message.text in (
                keyboards.ButtonText.OWN,
                keyboards.ButtonText.WIREGUARD_USER
            )
        ):
            if update.effective_user is not None:
                await self._delete_message(update, context)
                await self.__get_config_buttons_handler(update, context)
            return True
        
        return False


    async def __get_config_buttons_handler(self, update: Update, context: CallbackContext) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ (Own Config –∏–ª–∏ Wg User Config) –¥–ª—è –∫–æ–º–∞–Ω–¥ get_qrcode / get_config.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥ handle_text.
        """
        if context.user_data is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Context user_data is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return False
            
        if update.message is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Update message is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return False

        if update.message.text == keyboards.ButtonText.OWN and update.effective_user is not None:
            await self.__get_configuration(update, context, update.effective_user.id)
            await self._end_command(update, context)
            return True

        elif update.message.text == keyboards.ButtonText.WIREGUARD_USER.value.text:
            await update.message.reply_text(messages.ENTER_WIREGUARD_USERNAMES_MESSAGE)
            return True
        return False