from .base import *
from asyncio import Semaphore

class GetTelegramUsersCommand(BaseCommand):
    def __init__(
        self,
        database: UserDatabase,
        telegram_admin_ids: Iterable[TelegramId],
        semaphore: Semaphore
    ) -> None:
        super().__init__(
            database,
            telegram_admin_ids
        )
        self.semaphore = semaphore
        self.command_name = BotCommands.GET_TELEGRAM_USERS
    
    
    async def execute(self, update: Update, context: CallbackContext) -> Optional[bool]:
        """
        –ö–æ–º–∞–Ω–¥–∞ /get_telegram_users: –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ—Ö —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ
        –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –±–æ—Ç–æ–º (–µ—Å—Ç—å –≤ –ë–î).
        """
        try:
            if update.effective_user is None:
                if (curr_frame := inspect.currentframe()):
                    logger.error(f'Update effective_user is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
                return
            
            telegram_id = update.effective_user.id
            if not self.database.db_loaded:
                logger.error("–û—à–∏–±–∫–∞! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                if update.message is not None:
                    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
                return

            telegram_info = {tid: status for tid, status in self.database.get_all_telegram_users()}
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π -> Tid [{telegram_id}].")

            if not telegram_info:
                if update.message is not None:
                    await update.message.reply_text("–£ –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return

            telegram_usernames = await telegram_utils.get_usernames_in_bulk(
                telegram_info.keys(), context, self.semaphore
            )

            message_parts = [
                f"<b>üìã Telegram Id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ [{len(telegram_info)}]</b>\n"
                f"<em>–ó–Ω–∞—á–∫–æ–º üö© –æ–±–æ–∑–Ω–∞—á–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.</em>\n\n"
            ]
            message_parts += [
                f"{index}. {telegram_usernames.get(tid) or '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'} (<code>{tid}</code>)"
                f"{' üö©' if status else ''}\n"
                for index, (tid, status) in enumerate(telegram_info.items(), start=1)
            ]

            await telegram_utils.send_long_message(
                update, message_parts, parse_mode="HTML"
            )

        finally:
            await self._end_command(update, context)