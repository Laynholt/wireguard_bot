from .base import *
from libs.telegram import messages
from libs.wireguard import stats as wireguard_stats

from telegram import (
    KeyboardButton,
    KeyboardButtonRequestUsers,
    ReplyKeyboardMarkup
)
from libs.wireguard.user_control import sanitize_string


class GetWireguardUserStatsCommand(BaseCommand):
    def __init__(
        self,
        database: UserDatabase,
        wireguard_config_path: str,
        wireguard_log_path: str,
        return_own_stats: bool
    ) -> None:
        super().__init__(
            database
        )
    
        self.command_name = BotCommand.GET_MY_STATS if return_own_stats else BotCommand.GET_USER_STATS
        self.keyboard = Keyboard(
            title=BotCommand.GET_MY_STATS.pretty_text if return_own_stats else BotCommand.GET_USER_STATS.pretty_text,
            reply_keyboard=ReplyKeyboardMarkup(
                ((
                    KeyboardButton(
                        text=keyboards.ButtonText.TELEGRAM_USER.value.text,
                        request_users=KeyboardButtonRequestUsers(
                            request_id=0,
                            user_is_bot=False,
                            request_username=True,
                        )
                    ),
                    keyboards.ButtonText.WIREGUARD_USER.value.text
                    ), (
                        keyboards.ButtonText.CANCEL.value.text,
                    )
                ),
                one_time_keyboard=True
            )
        )
        self.keyboard.add_parent(keyboards.WIREGUARD_STATS_KEYBOARD)
        
        self.wireguard_config_path = wireguard_config_path
        self.wireguard_log_path = wireguard_log_path
    
    
    async def request_input(self, update: Update, context: CallbackContext):
        """
        –ö–æ–º–∞–Ω–¥–∞ /get_user_stats: –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ WireGuard.
        
        –ö–æ–º–∞–Ω–¥–∞ /get_my_stats: –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞—à–∏–º –∫–æ–Ω—Ñ–∏–≥–∞–º WireGuard.
        """
        if self.command_name == BotCommand.GET_MY_STATS:
            if update.effective_user is None:
                if (curr_frame := inspect.currentframe()):
                    logger.error(f'Update effective_user is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
                return
            
            telegram_id = update.effective_user.id
            
            if context.user_data is not None:
                context.user_data[ContextDataKeys.WIREGUARD_USERS] = []
            
            await self._create_list_of_wireguard_users_by_telegram_id(
                update, context, telegram_id
            )
            await self.__get_user_stats(update, context, own_stats=True)
            await self._end_command(update, context)

        # –ò–Ω–∞—á–µ /get_user_stats
        else:
            if self.keyboard is None:
                return
            
            if update.message is not None:
                await update.message.reply_text(
                    text=(
                        "–í—ã–±–µ—Ä–µ—Ç–µ, —á—å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å.\n\n"
                        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É {keyboards.ButtonText.CANCEL}."
                    ),
                    reply_markup=self.keyboard.reply_keyboard
                )
            if context.user_data is not None:
                context.user_data[ContextDataKeys.COMMAND] = self.command_name
                context.user_data[ContextDataKeys.WIREGUARD_USERS] = []


    async def execute(self, update: Update, context: CallbackContext) -> Optional[bool]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –¥–∞–Ω–Ω–æ–º—É Telegram.
        """
        if await self._buttons_handler(update, context):
            return
        
        if context.user_data is None or update.message is None:
            await self._end_command(update, context)
            return
    
        entries = update.message.text.split() if update.message.text is not None else []
        if entries:
            for entry in entries:
                ret_val = await self._create_list_of_wireguard_users(
                    update, context, sanitize_string(entry)
                )
            
                if ret_val is not None:
                    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–æ—à–∏–±–∫–∞ –∏–ª–∏ —É—Å–ø–µ—Ö)
                    await update.message.reply_text(ret_val.description)
                    if ret_val.status:
                        logger.info(ret_val.description)
                    else:
                        logger.error(ret_val.description)
            
        else:
            if update.message.users_shared is None:
                await self._end_command(update, context)
                return
            
            for shared_user in update.message.users_shared.users:
                await self._create_list_of_wireguard_users_by_telegram_id(
                    update,
                    context,
                    shared_user.user_id
                )

        await self.__get_user_stats(update, context)
        await self._end_command(update, context)


    async def __get_user_stats(self, update: Update, context: CallbackContext, own_stats: bool = False) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º WireGuard –∫–æ–Ω—Ñ–∏–≥–∞–º –≤ context'–µ.
        –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—É–¥–∞–ª—ë–Ω), –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º
        –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–∏—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ –ë–î.
        """
        if update.effective_user is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Update effective_user is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return
        
        if update.message is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Update message is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return
        
        if context.user_data is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Context user_data is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return
        
        telegram_id = update.effective_user.id

        if not await self._check_database_state(update):
            return

        wireguard_users = context.user_data[ContextDataKeys.WIREGUARD_USERS]
        if not wireguard_users:
            if own_stats:
                await update.message.reply_text(
                    "üìÅ <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π WireGuard.</b>\n\n"
                    f"üìù <em>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{BotCommand.REQUEST_NEW_CONFIG}, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å "
                    f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.</em>",
                    parse_mode="HTML"
                )
            else:
                await update.message.reply_text(
                    "‚ÑπÔ∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram "
                    "–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.</b>\n\n",
                    parse_mode="HTML"
                )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        all_wireguard_stats = wireguard_stats.accumulate_wireguard_stats(
            conf_file_path=self.wireguard_config_path,
            json_file_path=self.wireguard_log_path,
            sort_by=wireguard_stats.SortBy.TRANSFER_SENT,
        )
        
        if not all_wireguard_stats:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∏ –æ–¥–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É.")
            return

        owner_tid = self.database.get_telegram_id_by_user(wireguard_users[0])
        # –¢–∞–∫ –∫–∞–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –ø—Ä–∏–≤—è–∑–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º tid
        # (—ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∫–æ–¥–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞), —Ç–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫.
        # –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏, –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.
        owner_tid = owner_tid[0] if owner_tid else None
        
        if owner_tid is not None and own_stats is False:
            owner_username = await telegram_utils.get_username_by_id(owner_tid, context)
            owner_part = (
                f"   üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b>\n"
                f"      ‚îú üÜî <b>ID:</b> <code>{owner_tid}</code>\n"
                f"      ‚îî üîó <b>Telegram:</b> "
                f"{'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å' if owner_username is None else owner_username}"
            )

        else:
            owner_part = "   üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b>\n      ‚îî üö´ <i>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</i>"       

        owner_part = "" if own_stats else f"   {owner_part}\n"

        lines = []
        inactive_usernames = wireguard.get_inactive_usernames()
        
        for i, wg_user in enumerate(wireguard_users, start=1):
            user_data = all_wireguard_stats.get(wg_user, None)

            # –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ª–æ–≥–∞—Ö, 
            # –∞ —Ç–∞–∫–∂–µ –Ω–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª—è –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ docker exec.
            
            # –ü—Ä–∏—á–∏–Ω–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ wg0.conf, –ø–æ—ç—Ç–æ–º—É
            # –ª—É—á—à–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ, —Ä–∞–∑ –æ–Ω –∫–∞–∫-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è, –ª–∏–±–æ –∫–æ–≥–¥–∞-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–¥–∞–ª–∏–ª—Å—è. 
            if user_data is None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ñ–∏–≥ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏
                check_result = wireguard.check_user_exists(wg_user)
                if check_result.status:
                    remove_result = wireguard.remove_user(wg_user)
                    if remove_result.status:
                        logger.info(remove_result.description)
                    else:
                        logger.error(remove_result.description)

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î, –Ω–æ –∫–æ–Ω—Ñ–∏–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
                if self.database.delete_user(wg_user):
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{wg_user}] —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
                else:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ [{wg_user}] –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
                    )

                continue

            # –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            lines.append(
                f"\n<b>{i}]</b> <b>üåê –ö–æ–Ω—Ñ–∏–≥:</b> <i>{wg_user}</i> "
                f"{'üî¥ <b>[–ù–µ–∞–∫—Ç–∏–≤–µ–Ω]</b>' if wg_user in inactive_usernames else 'üü¢ <b>[–ê–∫—Ç–∏–≤–µ–Ω]</b>'}\n"
                f"{owner_part}"
                f"   üì° IP: {user_data.allowed_ips}\n"
                f"   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_data.transfer_received if user_data.transfer_received else 'N/A'}\n"
                f"   üì• –ü–æ–ª—É—á–µ–Ω–æ: {user_data.transfer_sent if user_data.transfer_sent else 'N/A'}\n"
                f"   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª–∏—á–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–∞–º Wireguard -> Tid [{telegram_id}].")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
        batch_size = 5
        batched_lines = [
            lines[i:i + batch_size]
            for i in range(0, len(lines), batch_size)
        ]
        
        await telegram_utils.send_batched_messages(
            update=update,
            batched_lines=batched_lines,
            parse_mode="HTML",
            groups_before_delay=2,
            delay_between_groups=0.5
        )


    async def _buttons_handler(self, update: Update, context: CallbackContext) -> bool:
        if await self._cancel_button_handler(update, context):
            await self._end_command(update, context)
            return True
        
        if (
            update.message is not None
            and update.message.text == keyboards.ButtonText.WIREGUARD_USER
        ):
            if update.effective_user is not None:
                await self._delete_message(update, context)
                await update.message.reply_text(messages.ENTER_WIREGUARD_USERNAMES_MESSAGE)
            return True
        
        return False