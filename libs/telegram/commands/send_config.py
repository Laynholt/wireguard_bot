from .base import *
from libs.telegram import messages

from telegram import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButtonRequestUsers
)


class SendConfigCommand(BaseCommand):
    def __init__(
        self,
        database: UserDatabase,
        telegram_admin_ids: Iterable[TelegramId]
    ) -> None:
        super().__init__(
            database,
            telegram_admin_ids,
        )
    
        self.command_name = BotCommands.SEND_CONFIG
        self.keyboard = ((
                KeyboardButton(
                    text=keyboards.BUTTON_SELECT_TELEGRAM_USER.text,
                    request_users=KeyboardButtonRequestUsers(
                        request_id=0,
                        user_is_bot=False,
                        request_username=True,
                    )
                ),
                keyboards.BUTTON_CLOSE.text
            ),
        )
    
    
    async def request_input(self, update: Update, context: CallbackContext):
        """
        –ö–æ–º–∞–Ω–¥–∞ /send_config: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ Wireguard –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        """
        if update.message is not None:
            await update.message.reply_text(messages.ENTER_WIREGUARD_USERNAMES_MESSAGE)
        if context.user_data is not None:
            context.user_data["command"] = self.command_name
            context.user_data["wireguard_users"] = []


    async def execute(self, update: Update, context: CallbackContext) -> Optional[bool]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(-–µ–π) Wireguard –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram.
        """
        if await self.__buttons_handler(update, context):
            await self.__end_command(update, context)
            return
        
        if context.user_data is None or update.message is None:
            await self.__end_command(update, context)
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É —Å–∞–º, –∞ –Ω–µ —á–µ—Ä–µ–∑ add_user
        if len(context.user_data["wireguard_users"]) > 0:
            
            entries = update.message.text.split() if update.message.text is not None else []
            for entry in entries:
                ret_val = await self.__create_list_of_wireguard_users(
                    update, context, entry
                )
                
                if ret_val is not None:
                    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–æ—à–∏–±–∫–∞ –∏–ª–∏ —É—Å–ø–µ—Ö)
                    await update.message.reply_text(ret_val.description)
                    if ret_val.status:
                        logger.info(ret_val.description)
                    else:
                        logger.error(ret_val.description)
            
            if len(context.user_data["wireguard_users"]) > 0:
                await update.message.reply_text(
                    (
                        f"–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "
                        f"'{keyboards.BUTTON_SELECT_TELEGRAM_USER}'.\n\n"
                        f"–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É, –Ω–∞–∂–º–∏—Ç–µ {keyboards.BUTTON_CLOSE}."
                    ),
                    reply_markup=ReplyKeyboardMarkup(self.keyboard, one_time_keyboard=True),
                )
        
        else:
            if update.message.users_shared is None:
                await self.__end_command(update, context)
                return
            
            for shared_user in update.message.users_shared.users:
                await self.__send_config(update, context, shared_user.user_id)
            
            await self.__end_command(update, context)


    async def __send_config(
        self, 
        update: Update,
        context: CallbackContext,
        telegram_id: TelegramId
    ) -> None:
        """
        –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (telegram_user) zip-—Ñ–∞–π–ª—ã –∏ QR-–∫–æ–¥—ã
        –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏–∑ context.user_data['wireguard_users'].
        """
        if not await self.__check_database_state(update):
            return
        
        if update.message is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Update message is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return
        
        if context.user_data is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Context user_data is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return

        telegram_username = await telegram_utils.get_username_by_id(
            telegram_id,
            context
        ) or "NoUsername"

        for user_name in context.user_data["wireguard_users"]:
            check_result = wireguard.check_user_exists(user_name)
            if not check_result.status:
                logger.error(f"–ö–æ–Ω—Ñ–∏–≥ [{user_name}] –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await update.message.reply_text(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è [{user_name}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            if wireguard.is_username_commented(user_name):
                logger.info(f"–ö–æ–Ω—Ñ–∏–≥ [{user_name}] –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω.")
                await update.message.reply_text(
                    f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è [{user_name}] –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞."
                )
                return

            logger.info(
                f"–°–æ–∑–¥–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é Zip-–∞—Ä—Ö–∏–≤ –∏ Qr-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard [{user_name}] "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [{telegram_username} ({telegram_id})]."
            )
            zip_result = wireguard.create_zipfile(user_name)
            try:
                if zip_result.status:
                    formatted_user = f"üîê <em>{user_name}</em>"
                    caption = (
                        f"<b>üì¶ –ù–æ–≤—ã–π –∞—Ä—Ö–∏–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n"
                        f"‚ïî‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"‚îÇ <i>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</i>\n"
                        f"‚îÇ‚ñ∏ üìÑ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
                        f"‚îÇ‚ñ∏ üì≤ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                        f"‚ïö‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b> {formatted_user}\n\n"
                        f"‚ïî‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"‚îÇ‚ñ∏ üìÇ –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤\n"
                        f"‚îÇ‚ñ∏ üõ° –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard\n"
                        f"‚îÇ‚ñ∏ ‚ûï –ù–∞–∂–º–∏—Ç–µ ¬´–¥–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å¬ª (+)\n"
                        f"‚îÇ‚ñ∏ üì∑ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
                        f"‚îÇ‚ñ∏ ‚öôÔ∏è –ò–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ .conf —Ñ–∞–π–ª\n"
                        f"‚ïö‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    )
                    
                    await context.bot.send_document(
                        chat_id=telegram_id,
                        document=open(zip_result.description, "rb"),
                        caption=caption,
                        parse_mode="HTML"
                    )

                    wireguard.remove_zipfile(user_name)

                    # png_path = wireguard.get_qrcode_path(user_name)
                    # if png_path.status:
                    #     await context.bot.send_photo(chat_id=tid, photo=open(png_path.description, "rb"))

                    current_admin_id = -1
                    current_admin_name = "NoUsername"
                    
                    if update.effective_user is not None:
                        current_admin_id = update.effective_user.id
                        current_admin_name = await telegram_utils.get_username_by_id(
                            current_admin_id, context
                        )

                    # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –¥–µ–π—Å—Ç–≤–∏–∏
                    text = (
                        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä [{current_admin_name} ({current_admin_id})] –æ—Ç–ø—Ä–∞–≤–∏–ª "
                        f"—Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Wireguard [{user_name}] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
                        f"[{telegram_username} ({telegram_id})]."
                    )
                    pretty_text = (
                        f"üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {current_admin_name} (<code>{current_admin_id}</code>)\n"
                        f"üì§ <b>–û—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard</b>\n"
                        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {telegram_username} (<code>{telegram_id}</code>)"
                    )
                    for admin_id in self.telegram_admin_ids:
                        if admin_id == current_admin_id:
                            await update.message.reply_text((
                                f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è [{user_name}] —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
                                f" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [{telegram_username} ({telegram_id})]."
                            ))
                            continue
                        try:
                            await context.bot.send_message(chat_id=admin_id, text=pretty_text, parse_mode="HTML")
                            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è [{admin_id}]: {text}")
                        except TelegramError as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}.")
                            await update.message.reply_text(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}."
                            )

            except TelegramError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}.")
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}.")


    async def __buttons_handler(self, update: Update, context: CallbackContext) -> bool:
        if await self.__close_button_handler(update, context):
            return True
        return False