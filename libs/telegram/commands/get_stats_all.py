from __future__ import annotations
from .base import *
from libs.wireguard import stats as wireguard_stats

import re
from enum import Enum
from asyncio import Semaphore
from dataclasses import dataclass, field

class GetAllWireguardUsersStatsCommand(BaseCommand):
    class SortSequence(Enum):
        ASCENDING = 1
        DESCENDING = 2
        
    @dataclass
    class Params:
        """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
        sort: "GetAllWireguardUsersStatsCommand.SortSequence" = field(
            default_factory=lambda: GetAllWireguardUsersStatsCommand.SortSequence.DESCENDING
        )
        head: int = 0
        tail: int = 0


    def __init__(
        self,
        database: UserDatabase,
        semaphore: Semaphore,
        wireguard_config_path: str,
        wireguard_log_path: str
    ) -> None:
        super().__init__(
            database
        )
        self.command_name = BotCommand.GET_ALL_STATS
        self.semaphore = semaphore
        self.wireguard_config_path = wireguard_config_path
        self.wireguard_log_path = wireguard_log_path
    
    
    async def request_input(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å –∫–ª—é—á–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è 
        –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥–∞–º Wireguard.
        """
        if update.message is not None:
            await update.message.reply_text(
        """
‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É):
sort=<—Ç–∏–ø> head=<N> tail=<M>

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ sort ‚Äî –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞):
‚Äî asc, ascending, 1  ‚Üí ASCENDING
‚Äî desc, descending, 2 ‚Üí DESCENDING
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: DESCENDING.

‚Ä¢ head ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (‚â• 0). –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ N —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0 (–Ω–µ –∑–∞–¥–∞–Ω–æ).

‚Ä¢ tail ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (‚â• 0). –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ M —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0 (–Ω–µ –∑–∞–¥–∞–Ω–æ).

–ü—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–≥—É—Ç –∏–¥—Ç–∏ –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –±—ã—Ç—å –æ–ø—É—â–µ–Ω—ã.
‚Ä¢ –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –æ–±–∞ head –∏ tail ‚Äî —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ–±–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: head=3 tail=2).
‚Ä¢ –ï—Å–ª–∏ head == 0 –∏ tail == 0 ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã.
‚Ä¢ –ï—Å–ª–∏ head + tail >= –¥–ª–∏–Ω–∞_—Å–ø–∏—Å–∫–∞ (–¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è –∏–ª–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫) ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã.
‚Ä¢ –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, –Ω–µ—Ü–µ–ª—ã–µ, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç) ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã.

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ sort=asc head=5        ‚Äî –ø–µ—Ä–≤—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ASCENDING
‚Ä¢ tail=4 sort=desc       ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —ç–ª–µ–º–µ–Ω—Ç–∞, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ DESCENDING
‚Ä¢ head=3 tail=2         ‚Äî –ø–µ—Ä–≤—ã–µ 3 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —ç–ª–µ–º–µ–Ω—Ç–∞
‚Ä¢ (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)       ‚Äî –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ head=7 tail=5 (len=10) ‚Äî –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ ‚Üí –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        """
        )
        if context.user_data is not None: 
            context.user_data[ContextDataKeys.COMMAND] = self.command_name
        
    async def execute(self, update: Update, context: CallbackContext) -> Optional[bool]:
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ WireGuard, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
        (Telegram ID –∏ username). –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–º–µ—Ç–∫—É.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –≤—ã–≤–æ–¥–∞ –∏–∑ request_input.
        """
        try:
            if update.message is None:
                if (curr_frame := inspect.currentframe()):
                    logger.error(f'Update message is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
                return
            
            keys = update.message.text
            parsed_keys = self.Params()
            if keys is not None and keys.strip():
                parsed_keys = self.__parse_params(
                    s=keys.strip(),
                    default_sort=self.SortSequence.DESCENDING,
                    default_head=0,
                    default_tail=0
                )
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            all_wireguard_stats = wireguard_stats.accumulate_wireguard_stats(
                conf_file_path=self.wireguard_config_path,
                json_file_path=self.wireguard_log_path,
                sort_by=wireguard_stats.SortBy.TRANSFER_SENT,
                reverse_sort=parsed_keys.sort == self.SortSequence.DESCENDING
            )

            if not all_wireguard_stats:
                await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∏ –æ–¥–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É.")
                return

            if not await self._check_database_state(update):
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∫–∏ (–≤–ª–∞–¥–µ–ª–µ—Ü <-> –∫–æ–Ω—Ñ–∏–≥)
            linked_users = self.database.get_all_linked_data()
            linked_dict = {user_name: tid for tid, user_name in linked_users}

            # –î–æ—Å—Ç–∞–µ–º username –¥–ª—è –≤—Å–µ—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (bulk-–∑–∞–ø—Ä–æ—Å)
            linked_telegram_ids = set(linked_dict.values())
            linked_telegram_names_dict = await telegram_utils.get_usernames_in_bulk(
                linked_telegram_ids, context, self.semaphore
            )

            lines = []
            inactive_usernames = wireguard.get_inactive_usernames()
            
            indexes = self.__make_index_range(
                len(all_wireguard_stats.items()),
                head=parsed_keys.head,
                tail=parsed_keys.tail
            )
            for i, (wg_user, user_data) in enumerate(all_wireguard_stats.items(), start=1):       
                if i not in indexes:
                    continue
            
                owner_tid = linked_dict.get(wg_user)
                if owner_tid is not None:
                    owner_username = linked_telegram_names_dict.get(owner_tid)
                    owner_part = (
                        f"   üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b>\n"
                        f"      ‚îú üÜî <b>ID:</b> <code>{owner_tid}</code>\n"
                        f"      ‚îî üîó <b>Telegram:</b> "
                        f"{'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å' if owner_username is None else owner_username}"
                    )
                else:
                    owner_part = "   üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b>\n      ‚îî üö´ <i>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</i>"

                lines.append(
                    f"\n<b>{i}]</b> <b>üåê –ö–æ–Ω—Ñ–∏–≥:</b> <i>{wg_user}</i> "
                    f"{'üî¥ <b>[–ù–µ–∞–∫—Ç–∏–≤–µ–Ω]</b>' if wg_user in inactive_usernames else 'üü¢ <b>[–ê–∫—Ç–∏–≤–µ–Ω]</b>'}\n"
                    f"   {owner_part}\n"
                    f"   üì° IP: {user_data.allowed_ips}\n"
                    f"   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_data.transfer_received if user_data.transfer_received else 'N/A'}\n"
                    f"   üì• –ü–æ–ª—É—á–µ–Ω–æ: {user_data.transfer_sent if user_data.transfer_sent else 'N/A'}\n"
                    f"   ‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ: {user_data.latest_handshake if user_data.latest_handshake else 'N/A'}\n"
                    f"   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                )

            tid = -1
            if update.effective_user is not None:
                tid = update.effective_user.id
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–æ–Ω—Ñ–∏–≥–∞–º Wireguard -> Tid [{tid}].")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
            batch_size = 5
            batched_lines = [
                lines[i:i + batch_size]
                for i in range(0, len(lines), batch_size)
            ]
            
            await telegram_utils.send_batched_messages(
                update=update,
                batched_lines=batched_lines,
                parse_mode="HTML",
                groups_before_delay=2,
                delay_between_groups=0.5
            )

        finally:
            await self._end_command(update, context)
        
        
    def __map_sort(self, raw: Optional[str], default: SortSequence) -> SortSequence:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ/—á–∏—Å–ª–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ sort –≤ SortSequence.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: 'asc', 'ascending', '1' -> ASCENDING
                    'desc', 'descending', '2' -> DESCENDING
        –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç default.
        """
        if raw is None:
            return default

        v = raw.strip().lower()
        if v in {"asc", "ascending"}:
            return self.SortSequence.ASCENDING
        if v in {"desc", "descending"}:
            return self.SortSequence.DESCENDING

        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ (1/2)
        try:
            n = int(v)
            return self.SortSequence(n)
        except Exception:
            return default
            
    def __parse_params(
        self,
        s: str,
        default_sort: SortSequence = SortSequence.DESCENDING,
        default_head: int = 0,
        default_tail: int = 0,
) -> Params:
        """
        –†–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ 'sort=sortType head=N tail=M'.
        –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        """
        if not isinstance(s, str):
            s = str(s)

        # –ø–æ–∏—Å–∫ sort
        m_sort = re.compile(r"\bsort=([^\s]+)\b").search(s)
        sort_raw  = m_sort.group(1) if m_sort else None
        sort_value = self.__map_sort(sort_raw, default_sort)

        # –ø–æ–∏—Å–∫ head –∏ tail (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞)
        m_head = re.compile(r"\bhead=([+-]?\d+)\b").search(s)
        m_tail = re.compile(r"\btail=([+-]?\d+)\b").search(s)

        if m_head:
            try:
                head_value = int(m_head.group(1))
                if head_value < 0:
                    head_value = default_head
            except ValueError:
                head_value = default_head
        else:
            head_value = default_head

        if m_tail:
            try:
                tail_value = int(m_tail.group(1))
                if tail_value < 0:
                    tail_value = default_tail
            except ValueError:
                tail_value = default_tail
        else:
            tail_value = default_tail

        return self.Params(sort=sort_value, head=head_value, tail=tail_value)
    

    def __make_index_range(self, elements_size: int, head: int = 0, tail: int = 0) -> List[int]:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º:
        - –ø–µ—Ä–≤—ã–µ `head` —ç–ª–µ–º–µ–Ω—Ç–æ–≤ -> –∏–Ω–¥–µ–∫—Å—ã 1 .. head
        - –ø–æ—Å–ª–µ–¥–Ω–∏–µ `tail` —ç–ª–µ–º–µ–Ω—Ç–æ–≤ -> –∏–Ω–¥–µ–∫—Å—ã len(elements)-tail + 1 .. len(elements)

        –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ `head` –∏ `tail` ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ (int).
        –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∞–µ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö:
        - –ï—Å–ª–∏ elements_size 0 -> –≤–µ—Ä–Ω—ë–º [].
        - –ï—Å–ª–∏ head < 0 –∏–ª–∏ tail < 0 -> –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ -> –≤–µ—Ä–Ω—ë–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã.
        - –ï—Å–ª–∏ head == 0 and tail == 0 -> –≤–µ—Ä–Ω—ë–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã.
        - –ï—Å–ª–∏ head + tail >= len(elements) -> –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –∏–ª–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –≤—Å—ë -> –≤–µ—Ä–Ω—ë–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã.
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã ‚Äî 1-based.
        """
        if elements_size == 0:
            return []

        # –û–±–∞ —Ä–∞–≤–Ω—ã 0 -> –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ
        if head == 0 and tail == 0:
            return list(range(1, elements_size + 1))

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å—á–∏—Ç–∞–µ–º –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º -> –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã
        if head < 0 or tail < 0:
            return list(range(1, elements_size + 1))

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º head/tail –≤–µ—Ä—Ö–Ω–∏–º –ø—Ä–µ–¥–µ–ª–æ–º n (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        if head > elements_size:
            head = elements_size
        if tail > elements_size:
            tail = elements_size

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è –∏–ª–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –≤–µ—Å—å –º–∞—Å—Å–∏–≤ -> –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ
        if head + tail >= elements_size:
            return list(range(1, elements_size + 1))

        indices: List[int] = []
        if head > 0:
            indices.extend(range(1, head + 1))
        if tail > 0:
            indices.extend(range(elements_size - tail + 1, elements_size + 1))
        return indices