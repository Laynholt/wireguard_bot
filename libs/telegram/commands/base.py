import inspect
import logging

from abc import ABC, abstractmethod
from typing import Any, Iterable, List, Optional, Tuple, Union

from telegram import Update
from telegram.ext import CallbackContext
from telegram.error import TelegramError

from libs.telegram import keyboards
from libs.telegram.commands import BotCommands
from libs.telegram.types import TelegramId, WireguardUserName
from libs.telegram.database import UserDatabase

import libs.telegram.utils as telegram_utils

import libs.wireguard.utils as wireguard_utils
import libs.wireguard.user_control as wireguard


logger = logging.getLogger(__name__)


class BaseCommand(ABC):
    def __init__(
        self,
        database: UserDatabase,
        telegram_admin_ids: Iterable[TelegramId],
    ) -> None:
        self.database = database
        self.telegram_admin_ids = telegram_admin_ids

        self.command_name: Optional[BotCommands] = None  
        self.keyboard: Tuple[Any, ...] = ()
    

    async def request_input(self, update: Update, context: CallbackContext) -> None:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)."""
        raise NotImplementedError("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥–∞.")
    
    
    @abstractmethod
    async def execute(self, update: Update, context: CallbackContext) -> Optional[bool]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.

        Returns:
            Optional[bool]: –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å Wireguard.
        """
        pass
    

    async def _check_database_state(self, update: Update) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.
        –ï—Å–ª–∏ –±–∞–∑–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –æ–ø–æ–≤–µ—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
        """
        if not self.database.db_loaded:
            logger.error("–û—à–∏–±–∫–∞! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            if update.message is not None:
                await update.message.reply_text(
                    "‚öôÔ∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏</b>\n\n"
                    "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    parse_mode="HTML"
                )
            return False
        return True


    async def _end_command(self, update: Update, context: CallbackContext) -> None:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ
        –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        if context.user_data is not None: 
            context.user_data["command"] = None
            context.user_data["wireguard_users"] = []

        if update.message is not None and update.effective_user is not None:
            await update.message.reply_text(
                f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏–∑ –º–µ–Ω—é (/{BotCommands.MENU}).",
                reply_markup=(
                    keyboards.ADMIN_MENU
                    if update.effective_user.id in self.telegram_admin_ids
                    else keyboards.USER_MENU
                )
            )


    async def _validate_username(self, update: Update, user_name: WireguardUserName) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã).
        """
        if not telegram_utils.validate_username(user_name):
            if update.message is not None:
                await update.message.reply_text(
                    f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{user_name}]. "
                    f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã."
                )
            return False
        return True


    async def _validate_telegram_id(self, update: Update, telegram_id: Union[TelegramId, str]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å Telegram ID (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
        """
        if not telegram_utils.validate_telegram_id(telegram_id):
            if update.message is not None:
                await update.message.reply_text(
                    f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram ID [{telegram_id}]. "
                    f"Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."
                )
            return False
        return True
    
    
    async def _create_list_of_wireguard_users(
        self,
        update: Update,
        context: CallbackContext,
        user_name: str
    ) -> Optional[wireguard_utils.FunctionResult]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ user_name –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Wireguard –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏,
        –µ—Å–ª–∏ user_name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
        """
        if not await self._validate_username(update, user_name):
            return None

        check_result = wireguard.check_user_exists(user_name)
        if check_result.status:
            if context.user_data is not None:
                context.user_data["wireguard_users"].append(user_name)
            return None
        return check_result


    async def _create_list_of_wireguard_users_by_telegram_id(
        self,
        update: Update,
        context: CallbackContext,
        telegram_id: TelegramId
    ) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 
        Wireguard –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ user_name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
        """
        
        if not await self._check_database_state(update):
            return
        
        if update.message is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Update message is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return
        
        if context.user_data is None:
            if (curr_frame := inspect.currentframe()):
                logger.error(f'Context user_data is None –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {curr_frame.f_code.co_name}')
            return


        wireguard_users = self.database.get_users_by_telegram_id(telegram_id)
        for user_name in wireguard_users:
            ret_val = await self._create_list_of_wireguard_users(
                update, context, user_name
            )
            
            if ret_val is not None and ret_val.status is False:
                logger.error(ret_val.description)

    
    async def _buttons_handler(self, update: Update, context: CallbackContext) -> bool:
        """
        –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫.
        
        Returns:
            bool: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è–≤–ª—è–ª–æ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.
            –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã. 
        """
        if not self.keyboard:
            return False
        raise NotImplementedError(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è [{self.keyboard}].")
        
        
    async def _close_button_handler(self, update: Update, context: CallbackContext) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ó–∞–∫—Ä—ã—Ç—å (BUTTON_CLOSE).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥ handle_text.
        """
        if not context.user_data:
            return False
        
        if update.message is None or update.message.text != keyboards.BUTTON_CLOSE:
            return False
        
        current_command = context.user_data.get("command", None)

        if current_command == self.command_name:
            await self._delete_message(update, context)
            if update.message is not None:
                await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return True
        return False


    async def _delete_message(self, update: Update, context: CallbackContext) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞ (–æ–±—ã—á–Ω–æ –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É).
        """
        if update.message is not None:
            try:
                await context.bot.delete_message(
                    chat_id=update.message.chat_id, message_id=update.message.message_id
                )
            except TelegramError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")