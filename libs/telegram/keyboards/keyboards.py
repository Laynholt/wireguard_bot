from typing import List, Optional, Union
from dataclasses import dataclass, field
from telegram import ReplyKeyboardMarkup

from libs.telegram.commands import BotCommand
from libs.telegram.keyboards import keys


KeyboardId = int

@dataclass
class Keyboard:
    _counter: int = field(init=False, repr=False, default=0)
    
    id: KeyboardId = field(init=False)
    title: str = ''
    reply_keyboard: Optional[ReplyKeyboardMarkup] = None
    parent: Optional["Keyboard"] = None
    children: List["Keyboard"] = field(default_factory=list)
    is_menu: bool = False
    
    def __post_init__(self) -> None:
        self.id = Keyboard._counter
        Keyboard._counter += 1
    
    def __eq__(self, other: object) -> bool:
        if not isinstance(other, Keyboard):
            return NotImplemented
        return self.id == other.id
    
    def __contains__(self, item: Union["Keyboard", KeyboardId, str]) -> bool:
        if isinstance(item, Keyboard):
            return item in self.children
        elif isinstance(item, KeyboardId):
            return any(child.id == item for child in self.children)
        elif isinstance(item, str):
            return any(child.title == item for child in self.children)
        return False

    def __repr__(self) -> str:
        return (f"{self.__class__.__name__}(id={self.id}, title={self.title!r}, "
                f"reply_keyboard={self.reply_keyboard!r}, "
                f"parent_id={self.parent.id if self.parent else None}, "
                f"children_ids={[child.id for child in self.children]})")
    
    def __str__(self) -> str:
        children_titles = ', '.join(child.title for child in self.children)
        return f"Keyboard <{self.title}> (id: {self.id}), children: [{children_titles}]"
    

    def get_child_by_id(self, child_id: KeyboardId) -> Optional["Keyboard"]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –µ–≥–æ id.

        Args:
            child_id (int): ID –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

        Returns:
            Optional[Keyboard]: –ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ None.
        """
        return next((child for child in self.children if child.id == child_id), None)

    
    def get_descendant_by_id(self, child_id: KeyboardId) -> Optional["Keyboard"]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ç–æ–º–∫–∞ (–≤ –ª—é–±–æ–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏) –ø–æ –µ–≥–æ id —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞.

        Args:
            child_id (KeyboardId): ID –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

        Returns:
            Optional[Keyboard]: –ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ—Ç–æ–º–æ–∫ —Å —Ç–∞–∫–∏–º id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
        """
        stack = list(self.children)  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä—è–º—ã—Ö –¥–µ—Ç–µ–π
        while stack:
            child = stack.pop()  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç (DFS)
            if child.id == child_id:
                return child
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–º–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –≤ —Å—Ç–µ–∫
            stack.extend(child.children)
        return None

    
    def add_parent(self, new_parent: "Keyboard") -> None:
        """
        –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è, –æ–±–Ω–æ–≤–ª—è—è —Å–≤—è–∑–∏.

        - –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å, —Ç–æ —Å—Ç–∞—Ä–∞—è —Å–≤—è–∑—å —É–¥–∞–ª—è–µ—Ç—Å—è.
        - –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–∞—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–≤—è–∑—å.

        Args:
            new_parent (Keyboard): –ù–æ–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å.
        """
        if self.parent is not None:
            if self.parent == new_parent:
                return            
            self.parent.children.remove(self)  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è

        self.parent = new_parent  # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        if self not in new_parent.children:
            new_parent.children.append(self)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è


    def add_child(self, child: "Keyboard") -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–±–µ–Ω–∫–∞ –∫ —Ç–µ–∫—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, –æ–±–Ω–æ–≤–ª—è—è —Å–≤—è–∑–∏.

        - –ï—Å–ª–∏ —Ä–µ–±–µ–Ω–æ–∫ —É–∂–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É —Ä–æ–¥–∏—Ç–µ–ª—é, —Ç–æ –æ–Ω –æ—Ç–≤—è–∑—ã–≤–∞–µ—Ç—Å—è.
        - –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–≤—è–∑—å.

        Args:
            child (Keyboard): –†–µ–±–µ–Ω–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
        """
        if child.parent is not None:
            if self == child.parent:
                return
            child.parent.children.remove(child)  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è

        child.parent = self  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        if child not in self.children:
            self.children.append(child)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π


# –ü–æ–¥–º–µ–Ω—é "–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ WireGuard"
WIREGUARD_ACTIONS_KEYBOARD = Keyboard(
    title="‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ WireGuard",
    reply_keyboard=ReplyKeyboardMarkup(
        (
            (BotCommand.ADD_USER.pretty_text,),
            (BotCommand.REMOVE_USER.pretty_text,),
            (BotCommand.COM_UNCOM_USER.pretty_text,),
            (BotCommand.SHOW_USERS_STATE.pretty_text,),
            (keys.ButtonText.CANCEL.value.text,)
        ),
        resize_keyboard=True,
        one_time_keyboard=False,
    ),
    is_menu=True
)

# –ü–æ–¥–º–µ–Ω—é "–ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard"
WIREGUARD_BINDINGS_KEYBOARD = Keyboard(
    title="üîó –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard",
    reply_keyboard=ReplyKeyboardMarkup(
        (
            (BotCommand.BIND_USER.pretty_text,),
            (BotCommand.UNBIND_USER.pretty_text,),
            (BotCommand.UNBIND_TELEGRAM_ID.pretty_text,),
            (BotCommand.GET_USERS_BY_ID.pretty_text,),
            (BotCommand.SHOW_ALL_BINDINGS.pretty_text,),
            (keys.ButtonText.CANCEL.value.text,)
        ),
        resize_keyboard=True,
        one_time_keyboard=False,
    ),
    is_menu=True
)

# –ü–æ–¥–º–µ–Ω—é "–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Telegram"
TELEGRAM_ACTIONS_KEYBOARD = Keyboard(
    title="üë§ –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Telegram",
    reply_keyboard=ReplyKeyboardMarkup(
        (
            (BotCommand.BAN_TELEGRAM_USER.pretty_text,),
            (BotCommand.UNBAN_TELEGRAM_USER.pretty_text,),
            (BotCommand.REMOVE_TELEGRAM_USER.pretty_text,),
            (keys.ButtonText.CANCEL.value.text,)
        ),
        resize_keyboard=True,
        one_time_keyboard=False,
    ),
    is_menu=True
)

# –ü–æ–¥–º–µ–Ω—é "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã WireGuard"
WIREGUARD_CONFIG_KEYBOARD = Keyboard(
    title="üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã WireGuard",
    reply_keyboard=ReplyKeyboardMarkup(
        (
            (BotCommand.GET_CONFIG.pretty_text,),
            (BotCommand.GET_QRCODE.pretty_text,),
            (BotCommand.SEND_CONFIG.pretty_text,),
            (keys.ButtonText.CANCEL.value.text,)
        ),
        resize_keyboard=True,
        one_time_keyboard=False,
    ),
    is_menu=True
)

# –ü–æ–¥–º–µ–Ω—é "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WireGuard"
WIREGUARD_STATS_KEYBOARD = Keyboard(
    title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WireGuard",
    reply_keyboard=ReplyKeyboardMarkup(
    (        
            (BotCommand.GET_MY_STATS.pretty_text,),
            (BotCommand.GET_USER_STATS.pretty_text,),
            (BotCommand.GET_ALL_STATS.pretty_text,),
            (keys.ButtonText.CANCEL.value.text,)
        ),
        resize_keyboard=True,
        one_time_keyboard=False,
    ),
    is_menu=True
)
    
# –ü–æ–¥–º–µ–Ω—é "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö Telegram"
TELEGRAM_INFO_KEYBOARD = Keyboard(
    title="üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö Telegram",
    reply_keyboard=ReplyKeyboardMarkup(
        (
            (BotCommand.GET_TELEGRAM_ID.pretty_text,),
            (BotCommand.GET_TELEGRAM_USERS.pretty_text,),
            (keys.ButtonText.CANCEL.value.text,)
        ),
        resize_keyboard=True,
        one_time_keyboard=False,
    ),
    is_menu=True
)

# –ü–æ–¥–º–µ–Ω—é "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
GENERAL_COMMANDS_KEYBOARD = Keyboard(
    title="üõ† –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
    reply_keyboard=ReplyKeyboardMarkup(
        (
            (BotCommand.HELP.pretty_text,),
            (BotCommand.SEND_MESSAGE.pretty_text,),
            (BotCommand.RELOAD_WG_SERVER.pretty_text,),
            (keys.ButtonText.CANCEL.value.text,)
        ),
        resize_keyboard=True,
        one_time_keyboard=False,
    ),
    is_menu=True
)


# –ü–æ–¥–º–µ–Ω—é "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã WireGuard" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_WIREGUARD_CONFIG_KEYBOARD = Keyboard(
    title="üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã WireGuard",
    reply_keyboard=ReplyKeyboardMarkup(
        (
            (BotCommand.GET_CONFIG.pretty_text,),
            (BotCommand.GET_QRCODE.pretty_text,),
            (BotCommand.REQUEST_NEW_CONFIG.pretty_text,),
            (keys.ButtonText.CANCEL.value.text,)
        ),
        resize_keyboard=True,
        one_time_keyboard=False,
    ),
    is_menu=True
)

# –ü–æ–¥–º–µ–Ω—é "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
USER_GENERAL_COMMANDS_KEYBOARD = Keyboard(
    title="‚ÑπÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
    reply_keyboard=ReplyKeyboardMarkup(
        (
            (BotCommand.GET_TELEGRAM_ID.pretty_text,),
            (BotCommand.GET_MY_STATS.pretty_text,),
            (BotCommand.HELP.pretty_text,),
            (keys.ButtonText.CANCEL.value.text,)
        ),
        resize_keyboard=True,
        one_time_keyboard=False,
    ),
    is_menu=True
)